SET SERVEROUTPUT ON;

--Tabla Clientes
CREATE TABLE C##finnk.tab_listado_clientes (
    id_cliente     NUMBER GENERATED BY DEFAULT AS IDENTITY,
    correo_cliente VARCHAR2(20) NOT NULL,
    CONSTRAINT llavep_cliente PRIMARY KEY ( id_cliente )
);

--Tabla Productos
CREATE TABLE C##finnk.tab_catalogo_productos (
    id_catalogo          NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    imagen_producto      VARCHAR2(200) NOT NULL,
    nombre_producto      VARCHAR2(40) NOT NULL,
    precio_producto      NUMBER NOT NULL,
    existencias_producto NUMBER NOT NULL,
    estado_producto       CHAR(1) NOT NULL CHECK (estado_producto IN ('Y', 'N')),
    CONSTRAINT llavep_catalogo PRIMARY KEY ( id_catalogo )
);


--Tabla proveedores
CREATE TABLE C##finnk.tab_listado_proveedores (
    id_proveedor           NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    nombre_proveedor       VARCHAR2(40) NOT NULL,
    apellidos_proveedor    VARCHAR2(40) NOT NULL,
    correo_proveedor       VARCHAR2(40) NOT NULL,
    telefono_proveedor     NUMBER NOT NULL,
    marca_proveedor        VARCHAR2(40) NOT NULL,
    nacionalidad_proveedor VARCHAR2(40) NOT NULL,
    estado_proveedor         CHAR(1) NOT NULL CHECK (estado_proveedor IN ('Y', 'N')),
    CONSTRAINT llavep_proveedor PRIMARY KEY ( id_proveedor )
);



--Tabla empleados
CREATE TABLE C##finnk.tab_listado_empleados (
    id_empleado          NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    nombre_empleado       VARCHAR2(40) NOT NULL,
    apellidos_empleado    VARCHAR2(40) NOT NULL,
    correo_empleado       VARCHAR2(40) NOT NULL,
    telefono_empleado     NUMBER NOT NULL,
    salario_empleado      NUMBER NOT NULL,
    puesto_empleado       VARCHAR2(40) NOT NULL,
    nacionalidad_empleado VARCHAR2(40) NOT NULL,
    estado_empleado       CHAR(1) NOT NULL CHECK (estado_empleado IN ('Y', 'N')),
    fk_tienda NUMBER,
    CONSTRAINT llavep_empleado PRIMARY KEY ( id_empleado ),
    CONSTRAINT fk_tienda_listadot FOREIGN KEY (fk_tienda) REFERENCES C##finnk.tab_listado_tienda(id_tienda)
    
);


--Tabla tiendas
CREATE TABLE C##finnk.tab_listado_tienda (
    id_tienda        NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    localidad_tienda VARCHAR2(40) NOT NULL,
    estado_tienda    CHAR(1) NOT NULL CHECK (estado_tienda IN ('Y', 'N')),
    CONSTRAINT llavep_tienda PRIMARY KEY ( id_tienda )
);



--Tabla Reclamos
CREATE TABLE C##finnk.tab_listado_reclamos (
    id_reclamos         NUMBER
        GENERATED BY DEFAULT AS IDENTITY,
    nombre_reclamo     VARCHAR2(40) NOT NULL,
    comentario_reclamo VARCHAR2(150) NOT NULL,
    fk_reclamos NUMBER,
    CONSTRAINT llavep_reclamos PRIMARY KEY ( id_reclamos ),
    CONSTRAINT fk_reclamos_listador FOREIGN KEY (fk_reclamos) REFERENCES C##finnk.tab_listado_clientes(id_cliente)
    
);

--para eliminar las tablas
drop table C##finnk.tab_listado_clientes;
drop table C##finnk.tab_catalogo_productos;
drop table C##finnk.tab_listado_proveedores;
drop table C##finnk.tab_listado_empleados;
drop table C##finnk.tab_listado_tienda;
drop table C##finnk.tab_listado_reclamos;


--select para ver el contenido de las tablas
select * from tab_listado_clientes
select * from tab_catalogo_productos
select * from tab_listado_proveedores
select * from C##finnk.tab_listado_empleados
select * from tab_listado_tienda
select * from tab_listado_reclamos



--Tienda insert 
select * from  C##finnk.tab_listado_tienda;

BEGIN
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (1, 'Tienda Finnk Cartago Metropolis', 'Y');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (2,'Tienda Finnk Cartago Metropolis','Y');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (3,'Tienda Finnk Escazu','Y');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (4,'Tienda Finnk San Jose','Y');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (5,'Tienda Finnk Heredia','Y');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (6,'Tienda Finnk Cartago Centro','N');
INSERT INTO C##finnk.tab_listado_tienda (id_tienda, localidad_tienda, estado_tienda) 
VALUES (8,'Tienda Finnk Limon','X');
END;


--Empleados insert
select * from C##finnk.tab_listado_empleados;

BEGIN
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (1, 'luis', 'vargas leiton', 'luivar88899@hotmail.com', '87065480', '650400', 'gerente', 'Costarricense', 'Y');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (2, 'olman', 'vargas vargas', 'olmanefr@gmail.com', '8818823', '375000', 'vendedor', 'Costarricense', 'Y');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (3, 'maricela', 'vargas robledo', 'mari445ro@outlook.com', '85251321', '520000', 'cajero', 'Costarricense', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (4, 'karol', 'vargas robledo', 'mari445ro@outlook.com', '85251321', '520000', 'cajero', 'Costarricense', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (5, 'merce', 'vargas robledo', 'mari445ro@outlook.com', '85251321', '520000', 'cajero', 'Costarricense', 'N');
  
  INSERT INTO C##finnk.tab_listado_empleados (id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (6, 'Osvaldo', 'Ovares Fallas', 'osfallas@outlook.com', '555444', '522000', 'dependiente', 'Costarricense', 'N');
  
  COMMIT;
END;



--Proveedor insert
select * from C##finnk.tab_listado_proveedores;

BEGIN
INSERT INTO C##finnk.tab_listado_proveedores (id_proveedor, nombre_proveedor, apellidos_proveedor, correo_proveedor, telefono_proveedor, marca_proveedor, nacionalidad_proveedor, estado_proveedor) VALUES 
(1,'David','ortega monge','daviOrte34@hotmail.com','60130495','Bolsos','Costarricense','Y');
INSERT INTO C##finnk.tab_listado_proveedores (id_proveedor, nombre_proveedor, apellidos_proveedor, correo_proveedor, telefono_proveedor, marca_proveedor, nacionalidad_proveedor, estado_proveedor) VALUES 
(2,'Omar','fernandez fernandez','omarfv8@gmail.com','84675931','Joyeria','Costarricense','Y');
INSERT INTO C##finnk.tab_listado_proveedores (id_proveedor, nombre_proveedor, apellidos_proveedor, correo_proveedor, telefono_proveedor, marca_proveedor, nacionalidad_proveedor, estado_proveedor) VALUES 
(3,'Jefferson','rodriguez monge','Jeffmonge14@outlook.com','72536420','Ropa','Costarricense','N');
END;
INSERT INTO C##finnk.tab_listado_proveedores (id_proveedor, nombre_proveedor, apellidos_proveedor, correo_proveedor, telefono_proveedor, marca_proveedor, nacionalidad_proveedor, estado_proveedor) VALUES 
(4,'Maria','Jimenez Alfaro','mariajoj@outlook.com','888888','Joyeria','Costarricense','N');
END;


--Productos insert
select * from C##finnk.tab_catalogo_productos;

BEGIN
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (1,'Blusa','https://img.ltwebstatic.com/images3_pi/2021/03/22/1616391124965789dfe2c3bec430704337d2d8dfe7_thumbnail_900x.webp','12500',6,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (2,'Top halter crop','https://img.ltwebstatic.com/images3_pi/2023/03/20/1679281009555c7b00a3444546e2a106f07cf09bff_thumbnail_900x.webp','15500',6,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (3,'Top hombros descubiertos','https://img.ltwebstatic.com/images3_pi/2022/06/01/1654061340225800f40a0e9f07ba8c82370464f914_thumbnail_900x.webp','12500',5,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (4,'Top crop unicolor','https://img.ltwebstatic.com/images3_pi/2023/02/23/1677116808cd87cfe350e272f4c3b8c2c1ba289411_thumbnail_900x.webp','10500',20,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (5,'Jeans','https://img.ltwebstatic.com/images3_pi/2022/08/01/165932028516100af5c2f67297ea2b174d177300a8_thumbnail_900x.webp','18000',35,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (6,'Destroyed Jeans','https://img.ltwebstatic.com/images3_pi/2021/08/03/162795825317df30b71ad5e72dd22c684b0a88ab37_thumbnail_900x.webp','20000',50,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (7,'Short mezclilla','https://img.ltwebstatic.com/images3_pi/2022/06/21/1655780984aef6dde6fe3ed44641690b6aa8690be0_thumbnail_900x.webp','13500',20,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (8,'Vestido Ajustable','https://img.ltwebstatic.com/images3_pi/2022/04/13/1649814844998cc773fd83d544c936f2c5de65fc3a_thumbnail_900x.webp','12500',32,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (9,'Vestido Corto','https://img.ltwebstatic.com/images3_pi/2022/06/21/16558060151577ad59bbe7604e7ff59de1c1a95557_thumbnail_900x.webp','12500',7,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (10,'Bolso','https://img.ltwebstatic.com/images3_pi/2022/08/25/1661414530ef9cb92e9c2bff1c6be6c0c4ee11c6da_thumbnail_900x.webp','15500',14,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (11,'Bolso Fiesta','https://img.ltwebstatic.com/images3_pi/2023/02/24/16772159154628c36527896830b0d259168684ee7c_thumbnail_900x.webp','11500',8,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (12,'Bolso CuadradO Mini','https://img.ltwebstatic.com/images3_pi/2022/10/12/1665557345ecb85f221332cb642d8d48ba1b809523_thumbnail_900x.webp','10500',14,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (13,'Bolso Neutral','https://img.ltwebstatic.com/images3_pi/2023/02/19/1676814739c9c4f0e70ed42509103a51566616da3f_thumbnail_900x.webp','16500',5,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (14,'Bolso Estampado','https://img.ltwebstatic.com/images3_pi/2021/12/27/1640599499115846291145b708a6190a3b5285aea8_thumbnail_900x.webp','20500',12,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (15,'Bolso Luxury','https://img.ltwebstatic.com/images3_pi/2022/06/13/16550837837d3836a9234777981a503bebcbc3fef1_thumbnail_900x.webp','12500',11,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (16,'Bolso CuadradO Mini','https://img.ltwebstatic.com/images3_pi/2023/01/13/1673594420f0ebf87557f9be9e2c8841b2956b3685_thumbnail_900x.webp','20000',6,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (17,'Bolso con Monedero','https://img.ltwebstatic.com/images3_pi/2023/01/10/16733416502a8887d1ba87db4c22028d9c8a346ea5_thumbnail_900x.webp','15000',7,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (18,'Funda transparente','https://img.ltwebstatic.com/images3_pi/2022/10/28/166693829893ea3be7cbc81e9242f60f1199cb3e80_thumbnail_900x.webp',9850,6,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (19,'Funda estampado','https://img.ltwebstatic.com/images3_pi/2022/11/30/16697940073c856fcae8bc5861b4da91da345cba34_thumbnail_900x.webp','12500',8,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (20,'Funda taza café','https://img.ltwebstatic.com/images3_pi/2022/12/05/1670204595b07b56d29dc0fbdeec065652996efa07_thumbnail_900x.webp','15500',7,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (21,'Funda floral & acollador','https://img.ltwebstatic.com/images3_pi/2022/03/07/1646617049e2b0892ca19e3813896b04cb75eea773_thumbnail_900x.webp','18000',4,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (22,'Funda estampado floral','https://img.ltwebstatic.com/images3_pi/2023/02/16/1676531864bea745d58ac62e8777aaf5733ade9540_thumbnail_900x.webp','12000',14,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (23,'Funda patrón león','https://img.ltwebstatic.com/images3_pi/2023/01/05/167288206182f99be538c9c6ba72f50a15dcfcc551_thumbnail_900x.webp','10500',13,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (24,'Funda estampado luna','https://img.ltwebstatic.com/images3_pi/2022/07/18/165813700122fadb647916fbabb24c7ee4d04964b1_thumbnail_900x.webp','14000',9,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (25,'Correa de reloj mármol','https://img.ltwebstatic.com/images3_pi/2022/09/08/16626203355340fd0f8a36b2ca124f1385754fd254_thumbnail_900x.webp','8500',11,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (26,'Reloj cuarzo','https://img.ltwebstatic.com/images3_pi/2023/02/27/16775104020f40f2d89862b4ddcb0d0dce9c1e0b79_thumbnail_900x.webp','12500',10,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (27,'Reloj cuarzo brillant','https://img.ltwebstatic.com/images3_pi/2023/03/21/1679380102b02f5368e6dbaceb8c102b8e9833ac03_thumbnail_900x.webp','20500',9,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (28,'Hombres Reloj cuarzo','https://img.ltwebstatic.com/images3_pi/2022/11/28/1669599633b563a4260a3ea7fd5dc2a56fca4de78c_thumbnail_900x.webp','15500',11,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (29,'Reloj cuarzo diamante','https://img.ltwebstatic.com/images3_pi/2023/03/21/1679380098c80ef27b275c50858894663bad067361_thumbnail_900x.webp','17500',5,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (30,'Hombres Reloj cuarzo','https://img.ltwebstatic.com/images3_pi/2023/03/29/1680078451f78be2713767b46227da98d11a956051_thumbnail_900x.webp','12500',13,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (31,'Reloj cuarzo de puntero','https://img.ltwebstatic.com/images3_pi/2023/03/08/167826815016954748a2cd87130d29ed0149da293e_thumbnail_900x.webp','10500',11,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (32,'Hombres Reloj cuadrado','https://img.ltwebstatic.com/images3_pi/2023/02/19/1676811813fa2fa01c51037059a9d1da2d7a3a73f7_thumbnail_900x.webp','10500',7,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (33,'Reloj cuarzo & Pulsera','https://img.ltwebstatic.com/images3_pi/2022/10/19/16661438103453954b0203657bf4c6b20d9663198d_thumbnail_900x.webp','15500',8,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (34,'Protector de pantalla','https://img.ltwebstatic.com/images3_pi/2022/08/24/16613384065f9b8534964f5c36370ece26334a715c_thumbnail_900x.webp','9500',15,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (35,'Collar Mariposa','https://img.ltwebstatic.com/images3_pi/2022/09/22/16638119530305e265277ad014c9f58ae168b53504_thumbnail_900x.webp','12500',11,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (36,'Aretes largos hoja','https://img.ltwebstatic.com/images3_pi/2023/02/27/167748954919534eafcdb73b3c808e8a95c7a0ce96_thumbnail_900x.webp','15500',16,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (37,'Argollas','https://img.ltwebstatic.com/images3_pi/2022/11/10/1668050549c8150383caa6eb96fdf0be7f59238411_thumbnail_900x.webp','14500',7,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (38,'Collar Mariposa','https://img.ltwebstatic.com/images3_pi/2022/06/21/1655783348d6e4d31a7cbbccd8c0891dc4746f03d1_thumbnail_900x.webp','18500',8,'Y');
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (39,'Aretes Gota de Agua','https://img.ltwebstatic.com/images3_pi/2023/03/08/1678240036eefbb365b651cc5ebc7214de22185c96_thumbnail_900x.webp','12500',10,'Y');
END;
INSERT INTO C##finnk.tab_catalogo_productos (id_catalogo, nombre_producto,  imagen_producto,  precio_producto, existencias_producto, estado_producto) 
VALUES (41,'Aretes Gota de Agua','https://img.ltwebstatic.com/images3_pi/2023/03/08/1678240036eefbb365b651cc5ebc7214de22185c96_thumbnail_900x.webp','12500',10,'Y');
END;



--Clientes insert
select * from C##finnk.tab_listado_clientes;

BEGIN
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (1,'jcastro@gmail.com');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (2,'acontreras@gmail.com');
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (3,'lmena@gmail.com');
END;
INSERT INTO C##finnk.tab_listado_clientes (id_cliente, correo_cliente) 
VALUES (4,'lmena@gmail.com');
END;

--Reclamos insert
select * from C##finnk.tab_listado_reclamos;

BEGIN
INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo) 
VALUES (1,'Luis','No me llego el producto con el accesorio extra que le compre');
INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo) 
VALUES (2,'axel','Excelente servicio');
INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo) 
VALUES (3,'karol','Excelente servicio');
INSERT INTO  C##finnk.tab_listado_reclamos (id_reclamos,nombre_reclamo, comentario_reclamo) 
VALUES (4,'alodra','Excelente');
END;
 

-------------------------Procedimientos almacenados,Cursores,Funciones de obtencion de tablas,triggers, packetes-------------------------------

--Procedimientos: 20
--Cursores:17
--Funciones: 16
--Packetes:10

--p1
--Cursor implicito 1

CREATE OR REPLACE PROCEDURE C##finnk.ObtenerProductosSP(
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
        SELECT * FROM C##finnk.tab_catalogo_productos;
END;
/

--p2

CREATE OR REPLACE PROCEDURE C##finnk.EliminarProductosSP(
    p_id_catalogo IN NUMBER
)
AS
BEGIN
    DELETE FROM C##finnk.tab_catalogo_productos
    WHERE id_catalogo = p_id_catalogo;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Product with ID ' || p_id_catalogo || ' deleted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error while deleting product: ' || SQLERRM);
END;
/



--P3
CREATE OR REPLACE PROCEDURE C##finnk.EditarProductoSP(
    p_id_catalogo IN NUMBER,
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
)
AS
BEGIN
    UPDATE C##finnk.tab_catalogo_productos
    SET imagen_producto = p_imagen_producto,
        nombre_producto = p_nombre_producto,
        precio_producto = p_precio_producto,
        existencias_producto = p_existencias_producto,
        estado_producto = p_estado_producto
    WHERE id_catalogo = p_id_catalogo;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Product with ID ' || p_id_catalogo || ' updated successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error while updating product: ' || SQLERRM);
END;
/

--p4--

CREATE OR REPLACE PROCEDURE C##finnk.AgregarProductoSP(
   
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
)
AS
BEGIN
    Insert into C##finnk.tab_catalogo_productos(imagen_producto,nombre_producto,precio_producto,
    existencias_producto,estado_producto) values (p_imagen_producto,
          p_nombre_producto,
          p_precio_producto,
          p_existencias_producto,
          p_estado_producto);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Product Create successfully.');

END;
/

select * from  C##finnk.tab_listado_empleados;


--f1

CREATE OR REPLACE FUNCTION C##finnk.ObtenerInformacionAdicional(
  p_id_empleado IN NUMBER,
  p_fk_tienda   IN NUMBER
) RETURN VARCHAR2 AS
  v_resultado VARCHAR2(100);
BEGIN
  v_resultado := '
                  En la tienda ' || NVL(TO_CHAR(p_fk_tienda), '(Sin asignar)');
  RETURN v_resultado;
END;
/
select * from C##finnk.tab_listado_empleados;

--p5
--Cursor implicito 2
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosSP(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_cursor FOR
    SELECT e.id_empleado, e.nombre_empleado, e.apellidos_empleado,e.correo_empleado,e.telefono_empleado,e.salario_empleado,e.puesto_empleado,e.nacionalidad_empleado,e.estado_empleado,
           C##finnk.ObtenerInformacionAdicional(e.id_empleado, e.fk_tienda) AS info_adicional
    FROM C##finnk.tab_listado_empleados e;
END;
/

--p6 plus eliminar empleado
--f2 eliminar empleado
--cursor 3 eliminar empleado
CREATE OR REPLACE FUNCTION C##finnk.EliminarEmpleadosPorID(p_id_empleado IN NUMBER) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_resultado VARCHAR2(100);
BEGIN
  BEGIN
    DELETE FROM C##finnk.tab_listado_empleados WHERE id_empleado = p_id_empleado;
    COMMIT;
    
    v_resultado := 'Empleado con ID ' || TO_CHAR(p_id_empleado) || ' eliminado correctamente';
  EXCEPTION
    WHEN OTHERS THEN
      v_resultado := 'Error: ' || SQLERRM;
  END;

  OPEN v_cursor FOR
    SELECT v_resultado AS mensaje FROM dual;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.EliminarEmpleadoSP(p_id_empleado IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.EliminarEmpleadosPorID(p_id_empleado);-- Este p resultado se retorna al llamar el procedimiento indicando que la eliminacion fue correcta
END;
/


--p7 Modificacion de empleados Procedimiento
--f3  Modificacion de empleados funcion
--c4 Modificacion de empleados cursor
CREATE OR REPLACE FUNCTION C##finnk.EditarEmpleado(
  p_id_empleado IN NUMBER,
  p_nombre_empleado IN VARCHAR2,
  p_apellidos_empleado IN VARCHAR2,
  p_correo_empleado IN VARCHAR2,
  p_telefono_empleado IN NUMBER,
  p_salario_empleado IN NUMBER,
  p_puesto_empleado IN VARCHAR2,
  p_nacionalidad_empleado IN VARCHAR2,
  p_estado_empleado IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
BEGIN
  UPDATE C##finnk.tab_listado_empleados
  SET nombre_empleado = p_nombre_empleado,
      apellidos_empleado = p_apellidos_empleado,
      correo_empleado = p_correo_empleado,
      telefono_empleado = p_telefono_empleado,
      salario_empleado = p_salario_empleado,
      puesto_empleado = p_puesto_empleado,
      nacionalidad_empleado = p_nacionalidad_empleado,
      estado_empleado = p_estado_empleado
  WHERE id_empleado = p_id_empleado;

  COMMIT;

  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_empleados WHERE id_empleado = p_id_empleado;

  RETURN v_cursor;
END;
/


CREATE OR REPLACE PROCEDURE C##finnk.EditarEmpleadoSP(
  p_id_empleado IN NUMBER,
  p_nombre_empleado IN VARCHAR2,
  p_apellidos_empleado IN VARCHAR2,
  p_correo_empleado IN VARCHAR2,
  p_telefono_empleado IN NUMBER,
  p_salario_empleado IN NUMBER,
  p_puesto_empleado IN VARCHAR2,
  p_nacionalidad_empleado IN VARCHAR2,
  p_estado_empleado IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  UPDATE C##finnk.tab_listado_empleados
  SET nombre_empleado = p_nombre_empleado,
      apellidos_empleado = p_apellidos_empleado,
      correo_empleado = p_correo_empleado,
      telefono_empleado = p_telefono_empleado,
      salario_empleado = p_salario_empleado,
      puesto_empleado = p_puesto_empleado,
      nacionalidad_empleado = p_nacionalidad_empleado,
      estado_empleado = p_estado_empleado
  WHERE id_empleado = p_id_empleado;
  
  COMMIT;
  
  OPEN p_cursor FOR
    SELECT * FROM C##finnk.tab_listado_empleados WHERE id_empleado = p_id_empleado;
END;
/


--p8 Agregar empleado 
--f4 Agregar empleado funcion
--c5 cursor 5 agregar empleado cursor implicito
CREATE OR REPLACE FUNCTION C##finnk.AgregarEmpleado(
  p_nombre_empleado IN VARCHAR2,
  p_apellidos_empleado IN VARCHAR2,
  p_correo_empleado IN VARCHAR2,
  p_telefono_empleado IN NUMBER,
  p_salario_empleado IN NUMBER,
  p_puesto_empleado IN VARCHAR2,
  p_nacionalidad_empleado IN VARCHAR2,
  p_estado_empleado IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_id_empleado NUMBER;
BEGIN
  INSERT INTO C##finnk.tab_listado_empleados (
    nombre_empleado, apellidos_empleado, correo_empleado,
    telefono_empleado, salario_empleado, puesto_empleado,
    nacionalidad_empleado, estado_empleado
  ) VALUES (
    p_nombre_empleado, p_apellidos_empleado, p_correo_empleado,
    p_telefono_empleado, p_salario_empleado, p_puesto_empleado,
    p_nacionalidad_empleado, p_estado_empleado
  )
  RETURNING id_empleado INTO v_id_empleado;
  
  COMMIT;
  
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_empleados WHERE id_empleado = v_id_empleado;
  
  RETURN v_cursor;
END;
/
CREATE OR REPLACE PROCEDURE C##finnk.AgregarEmpleadoSP(
  p_nombre_empleado IN VARCHAR2,
  p_apellidos_empleado IN VARCHAR2,
  p_correo_empleado IN VARCHAR2,
  p_telefono_empleado IN NUMBER,
  p_salario_empleado IN NUMBER,
  p_puesto_empleado IN VARCHAR2,
  p_nacionalidad_empleado IN VARCHAR2,
  p_estado_empleado IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  p_cursor := AgregarEmpleado(
    p_nombre_empleado,
    p_apellidos_empleado,
    p_correo_empleado,
    p_telefono_empleado,
    p_salario_empleado,
    p_puesto_empleado,
    p_nacionalidad_empleado,
    p_estado_empleado
  );
END;
/


--p9 Mostrar clientes procedimiento almacenado
--f5 mostrar clientes funcion
--c6 mostrar clientes cursor implicito

CREATE OR REPLACE FUNCTION C##finnk.obtener_informacion_clientes RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT * FROM C##finnk.tab_listado_clientes;
    RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.obtener_informacion_clientes_sp(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    p_cursor := obtener_informacion_clientes();
END;
/

--p10 eliminar clientes procedimiento almacenado
--f6 eliminar clientes funcion
--c7 eliminar clientes cursor
select * from C##finnk.tab_listado_clientes;
CREATE OR REPLACE FUNCTION C##finnk.eliminar_clientes_por_id(p_id_cliente IN NUMBER) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_resultado VARCHAR2(100);
BEGIN
  BEGIN
    DELETE FROM C##finnk.tab_listado_clientes WHERE id_cliente = p_id_cliente;
    COMMIT;
    
    v_resultado := 'Cliente con ID ' || TO_CHAR(p_id_cliente) || ' eliminado correctamente';
  EXCEPTION
    WHEN OTHERS THEN
      v_resultado := 'Error: ' || SQLERRM;
  END;

  OPEN v_cursor FOR
    SELECT v_resultado AS mensaje FROM dual;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.eliminar_cliente_sp(p_id_cliente IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := eliminar_clientes_por_id(p_id_cliente);
END;
/


--p11 mostrar provedores procedimiento
--f7 mostrar provedores con funcion
--c8 mostrar provedores cursor implcito
CREATE OR REPLACE FUNCTION C##finnk.obtener_proveedores RETURN SYS_REFCURSOR IS
  v_cursor SYS_REFCURSOR;
BEGIN
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_proveedores;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.obtener_proveedores_sp(p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.obtener_proveedores();
END;
/

--p12 eliminar provedores procedimiento
--f8 eliminar provedores con funcion
--c9 eliminar provedores cursor implcito


-- Función para eliminar proveedores por ID
CREATE OR REPLACE FUNCTION C##finnk.EliminarProveedoresPorID(p_id_proveedor IN NUMBER) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_resultado VARCHAR2(100);
BEGIN
  BEGIN
    DELETE FROM C##finnk.tab_listado_proveedores WHERE id_proveedor = p_id_proveedor;
    COMMIT;
    
    v_resultado := 'Proveedor con ID ' || TO_CHAR(p_id_proveedor) || ' eliminado correctamente';
  EXCEPTION
    WHEN OTHERS THEN
    v_resultado := 'Error: ' || SQLERRM;
  END;

  OPEN v_cursor FOR
    SELECT v_resultado AS mensaje FROM dual;
  
  RETURN v_cursor;
END;
/

-- Procedimiento para eliminar proveedor con SP
CREATE OR REPLACE PROCEDURE C##finnk.EliminarProveedorSP(p_id_proveedor IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.EliminarProveedoresPorID(p_id_proveedor);
END;
/

--p13 modificar provedores procedimiento
--f9 modificar provedores con funcion
--c10 modificar provedores cursor implcito




CREATE OR REPLACE FUNCTION C##finnk.EditarProveedor(
  p_id_proveedor IN NUMBER,
  p_nombre_proveedor IN VARCHAR2,
  p_apellidos_proveedor IN VARCHAR2,
  p_correo_proveedor IN VARCHAR2,
  p_telefono_proveedor IN NUMBER,
  p_marca_proveedor IN VARCHAR2,
  p_nacionalidad_proveedor IN VARCHAR2,
  p_estado_proveedor IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
BEGIN
  UPDATE C##finnk.tab_listado_proveedores
  SET nombre_proveedor = p_nombre_proveedor,
      apellidos_proveedor = p_apellidos_proveedor,
      correo_proveedor = p_correo_proveedor,
      telefono_proveedor = p_telefono_proveedor,
      marca_proveedor = p_marca_proveedor,
      nacionalidad_proveedor = p_nacionalidad_proveedor,
      estado_proveedor = p_estado_proveedor
  WHERE id_proveedor = p_id_proveedor;

  COMMIT;

  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_proveedores WHERE id_proveedor = p_id_proveedor;

  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.EditarProveedorSP(
  p_id_proveedor IN NUMBER,
  p_nombre_proveedor IN VARCHAR2,
  p_apellidos_proveedor IN VARCHAR2,
  p_correo_proveedor IN VARCHAR2,
  p_telefono_proveedor IN NUMBER,
  p_marca_proveedor IN VARCHAR2,
  p_nacionalidad_proveedor IN VARCHAR2,
  p_estado_proveedor IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  p_cursor := C##finnk.EditarProveedor(
    p_id_proveedor,
    p_nombre_proveedor,
    p_apellidos_proveedor,
    p_correo_proveedor,
    p_telefono_proveedor,
    p_marca_proveedor,
    p_nacionalidad_proveedor,
    p_estado_proveedor
  );
END;
/

--p14 agregar provedores procedimiento
--f10 agregar provedores con funcion
--c11 agregar provedores cursor implcito

CREATE OR REPLACE FUNCTION C##finnk.AgregarProveedor(
  p_nombre_proveedor IN VARCHAR2,
  p_apellidos_proveedor IN VARCHAR2,
  p_correo_proveedor IN VARCHAR2,
  p_telefono_proveedor IN NUMBER,
  p_marca_proveedor IN VARCHAR2,
  p_nacionalidad_proveedor IN VARCHAR2,
  p_estado_proveedor IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_id_proveedor NUMBER;
BEGIN
  INSERT INTO C##finnk.tab_listado_proveedores (
    nombre_proveedor, apellidos_proveedor, correo_proveedor,
    telefono_proveedor, marca_proveedor, nacionalidad_proveedor,
    estado_proveedor
  ) VALUES (
    p_nombre_proveedor, p_apellidos_proveedor, p_correo_proveedor,
    p_telefono_proveedor, p_marca_proveedor, p_nacionalidad_proveedor,
    p_estado_proveedor
  )
  RETURNING id_proveedor INTO v_id_proveedor;
  
  COMMIT;
  
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_proveedores WHERE id_proveedor = v_id_proveedor;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.AgregarProveedorSP(
  p_nombre_proveedor IN VARCHAR2,
  p_apellidos_proveedor IN VARCHAR2,
  p_correo_proveedor IN VARCHAR2,
  p_telefono_proveedor IN NUMBER,
  p_marca_proveedor IN VARCHAR2,
  p_nacionalidad_proveedor IN VARCHAR2,
  p_estado_proveedor IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  p_cursor := AgregarProveedor(
    p_nombre_proveedor,
    p_apellidos_proveedor,
    p_correo_proveedor,
    p_telefono_proveedor,
    p_marca_proveedor,
    p_nacionalidad_proveedor,
    p_estado_proveedor
  );
END;
/

--p15 mostrar tiendas procedimiento
--f11 mostrar tiendas con funcion
--c12 mostrar tiendas cursor implcito

-- Función para obtener las tiendas
CREATE OR REPLACE FUNCTION C##finnk.obtener_tiendas RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
BEGIN
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_tienda;
  
  RETURN v_cursor;
END;
/

-- Procedimiento para obtener las tiendas
CREATE OR REPLACE PROCEDURE C##finnk.obtener_tiendas_sp(p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.obtener_tiendas();
END;
/

--p16 eliminar tiendas procedimiento
--f12 eliminar tiendas con funcion
--c13 eliminar tiendas cursor implcito


CREATE OR REPLACE FUNCTION C##finnk.EliminarTiendasPorID(p_id_tienda IN NUMBER) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_resultado VARCHAR2(100);
BEGIN
  BEGIN
    DELETE FROM C##finnk.tab_listado_tienda WHERE id_tienda = p_id_tienda;
    COMMIT;
    
    v_resultado := 'Tienda con ID ' || TO_CHAR(p_id_tienda) || ' eliminada correctamente';
  EXCEPTION
    WHEN OTHERS THEN
    v_resultado := 'Error: ' || SQLERRM;
  END;

  OPEN v_cursor FOR
    SELECT v_resultado AS mensaje FROM dual;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.EliminarTiendaSP(p_id_tienda IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.EliminarTiendasPorID(p_id_tienda);
END;
/

--p17 modificar tiendas procedimiento
--f13 modificar tiendas con funcion
--c14 modificar tiendas cursor implcito

-- Función para editar tiendas por ID
CREATE OR REPLACE FUNCTION C##finnk.EditarTienda(
  p_id_tienda IN NUMBER,
  p_localidad_tienda IN VARCHAR2,
  p_estado_tienda IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
BEGIN
  UPDATE C##finnk.tab_listado_tienda
  SET localidad_tienda = p_localidad_tienda,
      estado_tienda = p_estado_tienda
  WHERE id_tienda = p_id_tienda;

  COMMIT;

  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_tienda WHERE id_tienda = p_id_tienda;

  RETURN v_cursor;
END;
/

-- Procedimiento para editar tienda con SP
CREATE OR REPLACE PROCEDURE C##finnk.EditarTiendaSP(
  p_id_tienda IN NUMBER,
  p_localidad_tienda IN VARCHAR2,
  p_estado_tienda IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  p_cursor := C##finnk.EditarTienda(
    p_id_tienda,
    p_localidad_tienda,
    p_estado_tienda
  );
END;
/

--p18 agregar tiendas procedimiento
--f14 agregar tiendas con funcion
--c15 agregar tiendas cursor implcito

-- Función para agregar tiendas
CREATE OR REPLACE FUNCTION C##finnk.AgregarTienda(
  p_localidad_tienda IN VARCHAR2,
  p_estado_tienda IN CHAR
) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_id_tienda NUMBER;
BEGIN
  INSERT INTO C##finnk.tab_listado_tienda (
    localidad_tienda, estado_tienda
  ) VALUES (
    p_localidad_tienda, p_estado_tienda
  )
  RETURNING id_tienda INTO v_id_tienda;
  
  COMMIT;
  
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_tienda WHERE id_tienda = v_id_tienda;
  
  RETURN v_cursor;
END;
/

-- Procedimiento para agregar tienda con SP
CREATE OR REPLACE PROCEDURE C##finnk.AgregarTiendaSP(
  p_localidad_tienda IN VARCHAR2,
  p_estado_tienda IN CHAR,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  p_cursor := C##finnk.AgregarTienda(
    p_localidad_tienda,
    p_estado_tienda
  );
END;
/

--p19 mostrar reclamos procedimiento
--f15 mostrar reclamos con funcion
--c16 mostrar reclamos cursor implcito

CREATE OR REPLACE FUNCTION C##finnk.obtener_reclamos RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
BEGIN
  OPEN v_cursor FOR
    SELECT * FROM C##finnk.tab_listado_reclamos;
  
  RETURN v_cursor;
END;
/
CREATE OR REPLACE PROCEDURE C##finnk.obtener_reclamos_sp(p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.obtener_reclamos();
END;
/

--p20 mostrar reclamos procedimiento
--f16 mostrar reclamos con funcion
--c17 mostrar reclamos cursor implcito

CREATE OR REPLACE FUNCTION C##finnk.EliminarReclamosPorID(p_id_reclamo IN NUMBER) RETURN SYS_REFCURSOR AS
  v_cursor SYS_REFCURSOR;
  v_resultado VARCHAR2(100);
BEGIN
  BEGIN
    DELETE FROM C##finnk.tab_listado_reclamos WHERE id_reclamos = p_id_reclamo;
    COMMIT;
    
    v_resultado := 'Reclamo con ID ' || TO_CHAR(p_id_reclamo) || ' eliminado correctamente';
  EXCEPTION
    WHEN OTHERS THEN
    v_resultado := 'Error: ' || SQLERRM;
  END;

  OPEN v_cursor FOR
    SELECT v_resultado AS mensaje FROM dual;
  
  RETURN v_cursor;
END;
/

CREATE OR REPLACE PROCEDURE C##finnk.EliminarReclamoSP(p_id_reclamo IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
BEGIN
  p_resultado := C##finnk.EliminarReclamosPorID(p_id_reclamo);
END;
/

---------------------------------------------------------------------
--Paquetes

-- Paquete 1
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_PRODUCTOS_OBTENER AS
  PROCEDURE ObtenerProductosSP(p_cursor OUT SYS_REFCURSOR);
END PCK_FINNK_PRODUCTOS_OBTENER;

-- Paquete 1 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_PRODUCTOS_OBTENER AS
  PROCEDURE ObtenerProductosSP(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM C##finnk.tab_catalogo_productos;
  END;
END PCK_FINNK_PRODUCTOS_OBTENER;


-- Paquete 2
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_PRODUCTOS_ELIMINAR AS
  PROCEDURE EliminarProductoSP(p_id_catalogo IN NUMBER);
END PCK_FINNK_PRODUCTOS_ELIMINAR;

-- Paquete 2 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_PRODUCTOS_ELIMINAR AS
  PROCEDURE EliminarProductoSP(p_id_catalogo IN NUMBER) AS
  BEGIN
    DELETE FROM C##finnk.tab_catalogo_productos
    WHERE id_catalogo = p_id_catalogo;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END;
END PCK_FINNK_PRODUCTOS_ELIMINAR;



-- Paquete 3
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_PRODUCTOS_EDITAR AS
  PROCEDURE EditarProductoSP(
    p_id_catalogo IN NUMBER,
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
  );
END PCK_FINNK_PRODUCTOS_EDITAR;
-- Paquete 3 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_PRODUCTOS_EDITAR AS
  PROCEDURE EditarProductoSP(
    p_id_catalogo IN NUMBER,
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
  ) AS
  BEGIN
    UPDATE C##finnk.tab_catalogo_productos
    SET imagen_producto = p_imagen_producto,
        nombre_producto = p_nombre_producto,
        precio_producto = p_precio_producto,
        existencias_producto = p_existencias_producto,
        estado_producto = p_estado_producto
    WHERE id_catalogo = p_id_catalogo;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END;
END PCK_FINNK_PRODUCTOS_EDITAR;



-- Paquete 4
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_PRODUCTOS_AGREGAR AS
  PROCEDURE AgregarProductoSP(
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
  );
END PCK_FINNK_PRODUCTOS_AGREGAR;
-- Paquete 4 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_PRODUCTOS_AGREGAR AS
  PROCEDURE AgregarProductoSP(
    p_imagen_producto IN VARCHAR2,
    p_nombre_producto IN VARCHAR2,
    p_precio_producto IN NUMBER,
    p_existencias_producto IN NUMBER,
    p_estado_producto IN CHAR
  ) AS
  BEGIN
    INSERT INTO C##finnk.tab_catalogo_productos (
      imagen_producto, nombre_producto, precio_producto,
      existencias_producto, estado_producto
    ) VALUES (
      p_imagen_producto, p_nombre_producto, p_precio_producto,
      p_existencias_producto, p_estado_producto
    );
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END;
END PCK_FINNK_PRODUCTOS_AGREGAR;


-- Paquete 5
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_EMPLEADOS_OBTENER AS
  PROCEDURE ObtenerEmpleadosSP(p_cursor OUT SYS_REFCURSOR);
END PCK_FINNK_EMPLEADOS_OBTENER;
-- Paquete 5 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_EMPLEADOS_OBTENER AS
  PROCEDURE ObtenerEmpleadosSP(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT e.id_empleado, e.nombre_empleado, e.apellidos_empleado, e.correo_empleado, e.telefono_empleado, e.salario_empleado, 
             e.puesto_empleado, e.nacionalidad_empleado, e.estado_empleado,
             C##finnk.ObtenerInformacionAdicional(e.id_empleado, e.fk_tienda) AS info_adicional
      FROM C##finnk.tab_listado_empleados e;
  END;
END PCK_FINNK_EMPLEADOS_OBTENER;


-- Paquete 6
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_EMPLEADOS_ELIMINAR AS
  PROCEDURE EliminarEmpleadoSP(p_id_empleado IN NUMBER, p_resultado OUT SYS_REFCURSOR);
END PCK_FINNK_EMPLEADOS_ELIMINAR;

-- Paquete 6 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_EMPLEADOS_ELIMINAR AS
  PROCEDURE EliminarEmpleadoSP(p_id_empleado IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
  BEGIN
    p_resultado := C##finnk.EliminarEmpleadosPorID(p_id_empleado);
  END;
END PCK_FINNK_EMPLEADOS_ELIMINAR;


-- Paquete 7
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_EMPLEADOS_EDITAR AS
  PROCEDURE EditarEmpleadoSP(
    p_id_empleado IN NUMBER, p_nombre_empleado IN VARCHAR2,
    p_apellidos_empleado IN VARCHAR2, p_correo_empleado IN VARCHAR2,
    p_telefono_empleado IN NUMBER, p_salario_empleado IN NUMBER,
    p_puesto_empleado IN VARCHAR2, p_nacionalidad_empleado IN VARCHAR2,
    p_estado_empleado IN CHAR, p_cursor OUT SYS_REFCURSOR);
END PCK_FINNK_EMPLEADOS_EDITAR;
--paqeute 7 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_EMPLEADOS_EDITAR AS
  PROCEDURE EditarEmpleadoSP(
    p_id_empleado IN NUMBER, p_nombre_empleado IN VARCHAR2,
    p_apellidos_empleado IN VARCHAR2, p_correo_empleado IN VARCHAR2,
    p_telefono_empleado IN NUMBER, p_salario_empleado IN NUMBER,
    p_puesto_empleado IN VARCHAR2, p_nacionalidad_empleado IN VARCHAR2,
    p_estado_empleado IN CHAR, p_cursor OUT SYS_REFCURSOR
  ) AS
  BEGIN
    p_cursor := C##finnk.EditarEmpleado(
      p_id_empleado, p_nombre_empleado,
      p_apellidos_empleado, p_correo_empleado,
      p_telefono_empleado, p_salario_empleado,
      p_puesto_empleado, p_nacionalidad_empleado,
      p_estado_empleado
    );
  END;
END PCK_FINNK_EMPLEADOS_EDITAR;


-- Paquete 8
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_EMPLEADOS_AGREGAR AS
  PROCEDURE AgregarEmpleadoSP(
    p_nombre_empleado IN VARCHAR2, p_apellidos_empleado IN VARCHAR2,
    p_correo_empleado IN VARCHAR2, p_telefono_empleado IN NUMBER,
    p_salario_empleado IN NUMBER, p_puesto_empleado IN VARCHAR2,
    p_nacionalidad_empleado IN VARCHAR2, p_estado_empleado IN CHAR,
    p_cursor OUT SYS_REFCURSOR
  );
END PCK_FINNK_EMPLEADOS_AGREGAR;


-- Paquete 8 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_EMPLEADOS_AGREGAR AS
  PROCEDURE AgregarEmpleadoSP(
    p_nombre_empleado IN VARCHAR2, p_apellidos_empleado IN VARCHAR2,
    p_correo_empleado IN VARCHAR2, p_telefono_empleado IN NUMBER,
    p_salario_empleado IN NUMBER, p_puesto_empleado IN VARCHAR2,
    p_nacionalidad_empleado IN VARCHAR2, p_estado_empleado IN CHAR,
    p_cursor OUT SYS_REFCURSOR
  ) AS
  BEGIN
    p_cursor := C##finnk.AgregarEmpleado(
      p_nombre_empleado, p_apellidos_empleado,
      p_correo_empleado, p_telefono_empleado,
      p_salario_empleado, p_puesto_empleado,
      p_nacionalidad_empleado, p_estado_empleado
    );
  END;
END PCK_FINNK_EMPLEADOS_AGREGAR;


-- Paquete 9
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_RECLAMOS_OBTENER AS
  PROCEDURE ObtenerReclamosSP(p_cursor OUT SYS_REFCURSOR);
  FUNCTION ObtenerReclamos RETURN SYS_REFCURSOR;
END PCK_FINNK_RECLAMOS_OBTENER;

--Paquete 9 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_RECLAMOS_OBTENER AS
  PROCEDURE ObtenerReclamosSP(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM C##finnk.tab_listado_reclamos;
  END;

  FUNCTION ObtenerReclamos RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
  BEGIN
    OPEN v_cursor FOR
      SELECT * FROM C##finnk.tab_listado_reclamos;
    RETURN v_cursor;
  END;
END PCK_FINNK_RECLAMOS_OBTENER;


-- Paquete 10
CREATE OR REPLACE PACKAGE C##finnk.PCK_FINNK_RECLAMOS_ELIMINAR AS
  PROCEDURE EliminarReclamoSP(p_id_reclamo IN NUMBER, p_resultado OUT SYS_REFCURSOR);
  FUNCTION EliminarReclamosPorID(p_id_reclamo IN NUMBER) RETURN SYS_REFCURSOR;
END PCK_FINNK_RECLAMOS_ELIMINAR;

--Paquete 10 body
CREATE OR REPLACE PACKAGE BODY C##finnk.PCK_FINNK_RECLAMOS_ELIMINAR AS
  PROCEDURE EliminarReclamoSP(p_id_reclamo IN NUMBER, p_resultado OUT SYS_REFCURSOR) AS
  BEGIN
    p_resultado := C##finnk.EliminarReclamosPorID(p_id_reclamo);
  END;
  FUNCTION EliminarReclamosPorID(p_id_reclamo IN NUMBER) RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
    v_resultado VARCHAR2(100);
  BEGIN
    BEGIN
      DELETE FROM C##finnk.tab_listado_reclamos WHERE id_reclamos = p_id_reclamo;
      COMMIT;
      v_resultado := 'Reclamo con ID ' || TO_CHAR(p_id_reclamo) || ' eliminado correctamente';
    EXCEPTION
      WHEN OTHERS THEN
      v_resultado := 'Error: ' || SQLERRM;
    END;
    OPEN v_cursor FOR
      SELECT v_resultado AS mensaje FROM dual;
    RETURN v_cursor;
  END;
END PCK_FINNK_RECLAMOS_ELIMINAR;




--------------------------------------------------------------------------------------------
--PROCEDIMIENTOS ALMACENADOS--
 --P1--
 CREATE OR REPLACE PROCEDURE C##finnk.InsertarCliente(
  p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE,
  p_correo_cliente IN C##finnk.tab_listado_clientes.correo_cliente%TYPE
) AS
BEGIN
  INSERT INTO C##finnk.tab_listado_clientes(id_cliente, correo_cliente)
  VALUES (p_id_cliente, p_correo_cliente);
  COMMIT;
END;

execute C##finnk.InsertarCliente (10,'Nicole');

select * from C##finnk.tab_listado_clientes;
set serveroutput on

--P2--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarPrecioProducto(
  p_id_catalogo IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE,
  p_precio_producto IN C##finnk.tab_catalogo_productos.precio_producto%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_catalogo_productos
  SET precio_producto = p_precio_producto
  WHERE id_catalogo = p_id_catalogo;
  COMMIT;
END;

--P3--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerProveedoresPorEstado(
  p_estado_proveedor IN C##finnk.tab_listado_proveedores.estado_proveedor%TYPE
) AS
  v_proveedor C##finnk.tab_listado_proveedores%ROWTYPE;
BEGIN
  SELECT *
  INTO v_proveedor
  FROM C##finnk.tab_listado_proveedores
  WHERE estado_proveedor = p_estado_proveedor;
  
  DBMS_OUTPUT.PUT_LINE('ID_Proveedor: ' || v_proveedor.id_proveedor);
  DBMS_OUTPUT.PUT_LINE('Nombre_Proveedor: ' || v_proveedor.nombre_proveedor);
 
END;

Execute C##finnk.ObtenerProveedoresPorEstado;
--P4--
CREATE OR REPLACE PROCEDURE C##finnk.InsertarEmpleado(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
  p_id_tienda IN C##finnk.tab_listado_empleados.fk_tienda%TYPE,
  p_nombre_empleado IN C##finnk.tab_listado_empleados.nombre_empleado%TYPE,
  p_apellido_empleado IN C##finnk.tab_listado_empleados.apellidos_empleado%TYPE,
  p_correo_empleado IN C##finnk.tab_listado_empleados.correo_empleado%TYPE,
  p_telefono_empleado IN C##finnk.tab_listado_empleados.telefono_empleado%TYPE,
  p_salario_empleado IN C##finnk.tab_listado_empleados.salario_empleado%TYPE,
  p_puesto_empleado IN C##finnk.tab_listado_empleados.puesto_empleado%TYPE,
  p_nacionalidad_empleado IN C##finnk.tab_listado_empleados.nacionalidad_empleado%TYPE,
  p_estado_empleado IN C##finnk.tab_listado_empleados.estado_empleado%TYPE
) AS
BEGIN
  INSERT INTO c##finnk.tab_listado_empleados(id_empleado, fk_tienda, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado)
  VALUES (p_id_empleado, p_id_tienda, p_nombre_empleado, p_apellido_empleado, p_correo_empleado, p_telefono_empleado, p_salario_empleado, p_puesto_empleado, p_nacionalidad_empleado, p_estado_empleado);
  COMMIT;
END;


--P5--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroTiendasPorLocalidad(
  p_localidad_tienda IN C##finnk.tab_listado_tienda.localidad_tienda%TYPE,
  p_numero_tiendas OUT NUMBER
) AS
BEGIN
  SELECT COUNT(*)
  INTO p_numero_tiendas
  FROM C##finnk.tab_listado_tienda
  WHERE localidad_tienda = p_localidad_tienda;
END;


--P6--
CREATE OR REPLACE PROCEDURE C##finnk.kEliminarReclamo(
  p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE
) AS
BEGIN
  DELETE FROM C##finnk.tab_listado_reclamos
  WHERE id_reclamos = p_id_reclamo;
  COMMIT;
END;

execute C##finnk.kEliminarReclamo(1);
SET SERVEROUTPUT ON
--P7--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorTienda(
  p_id_tienda IN C##finnk.tab_listado_tienda.id_tienda%TYPE
) AS
BEGIN
  SELECT *
  FROM C##finnk.tab_listado_empleados
  WHERE fk_tienda = p_id_tienda;
END;


--P8--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarEstadoProveedor(
  p_id_proveedor IN C##finnk.tab_listado_proveedores.id_proveedor%TYPE,
  p_estado_proveedor IN C##finnk.tab_listado_proveedores.estado_proveedor%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_listado_proveedores
  SET estado_proveedor = p_estado_proveedor
  WHERE id_proveedor = p_id_proveedor;
  COMMIT;
END;


--P9--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerTotalReclamos(
  p_total_reclamos OUT NUMBER
) AS
BEGIN
  SELECT COUNT(*)
  INTO p_total_reclamos
  FROM C##finnk.tab_listado_reclamos;
END;

EXECUTE C##finnk.ObtenerTotalReclamos;

--P10--
CREATE OR REPLACE PROCEDURE C##finnk.EliminarCliente(
  p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
) AS
BEGIN
  DELETE FROM C##finnk.tab_listado_clientes
  WHERE id_cliente = p_id_cliente;
  COMMIT;
END;

EXECUTE C##finnk.EliminarCliente;

--P11--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerProductosAgotados AS
  -- Declarar una variable de registro para almacenar los resultados de la consulta
  v_producto C##finnk.tab_catalogo_productos%ROWTYPE;
BEGIN
  -- Utilizar la cláusula INTO para almacenar los resultados de la consulta en la variable de registro
  SELECT *
  INTO v_producto
  FROM C##finnk.tab_catalogo_productos
  WHERE existencias_producto = 0;
  
  -- Realizar alguna operación con los resultados, por ejemplo, mostrar los datos en la salida
  DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_producto.id_catalogo);
  DBMS_OUTPUT.PUT_LINE('Imagen_Producto: ' || v_producto.imagen_producto);
  -- Continúa con las demás columnas según tus necesidades
END;


--P12--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarSalarioEmpleado(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
  p_salario_empleado IN C##finnk.tab_listado_empleados.salario_empleado%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_listado_empleados
  SET salario_empleado = p_salario_empleado
  WHERE id_empleado = p_id_empleado;
  COMMIT;
END;


--P13--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarSalarioEmpleado(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
  p_salario_empleado IN c##finnk.tab_listado_empleados.salario_empleado%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_listado_empleados
  SET salario_empleado = p_salario_empleado
  WHERE id_empleado = p_id_empleado;
  COMMIT;
END;


--P14--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroEmpleadosPorTienda(
  p_id_tienda IN C##finnk.tab_listado_tienda.id_tienda%TYPE,
  p_numero_empleados OUT NUMBER
) AS
BEGIN
  SELECT COUNT(*)
  INTO p_numero_empleados
  FROM C##finnk.tab_listado_empleados
  WHERE fk_tienda = p_id_tienda;
END;


--P15--
CREATE OR REPLACE PROCEDURE C##finnk.EliminarProducto(
  p_id_catalogo IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE
) AS
BEGIN
  DELETE FROM C##finnk.tab_catalogo_productos
  WHERE id_catalogo = p_id_catalogo;
  COMMIT;
END;


--P16--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerClientesPorCorreo(
  p_correo_cliente IN VARCHAR2
) AS
  v_cliente C##finnk.tab_listado_clientes%ROWTYPE;
BEGIN
  SELECT *
  INTO v_cliente
  FROM C##finnk.tab_listado_clientes
  WHERE correo_cliente = p_correo_cliente;
  
  DBMS_OUTPUT.PUT_LINE('ID_Cliente: ' || v_cliente.id_cliente);
  DBMS_OUTPUT.PUT_LINE('Correo_Cliente: ' || v_cliente.correo_cliente);
  
END;


--P17--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarNombreEmpleado(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE,
  p_nombre_empleado IN C##finnk.tab_listado_empleados.nombre_empleado%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_listado_empleados
  SET nombre_empleado = p_nombre_empleado
  WHERE id_empleado = p_id_empleado;
  COMMIT;
END;

--P18--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMaximo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;

BEGIN
  DECLARE
    v_salario_maximo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT MAX(salario_empleado) INTO v_salario_maximo FROM c##finnk.tab_listado_empleados;
    
    FOR emp IN (SELECT *
                FROM C##finnk.tab_listado_empleados
                WHERE salario_empleado = v_salario_maximo)
    LOOP
      v_id_empleado := emp.id_empleado;
      v_nombre_empleado := emp.nombre_empleado;
      
      DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
      DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
    END LOOP;
  END;
END;
--P19--
CREATE OR REPLACE PROCEDURE C##finnk.InsertarReclamo(
  p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE,
  p_nombre_reclamo IN C##finnk.tab_listado_reclamos.nombre_reclamo%TYPE,
  p_comentario_reclamo IN C##finnk.tab_listado_reclamos.comentario_reclamo%TYPE
) AS
BEGIN
  INSERT INTO C##finnk.tab_listado_reclamos(id_reclamos, nombre_reclamo, comentario_reclamo)
  VALUES (p_id_reclamo, p_nombre_reclamo, p_comentario_reclamo);
  COMMIT;
END;


--P20--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerProductosDisponibles AS
BEGIN
  CURSOR c_productos IS
    SELECT *    FROM C##finnk.tab_catalogo_productos
    WHERE existencias_producto > 0;
  

  v_id_catalogo C##finnk.tab_catalogo_productos.id_catalogo%TYPE;
  v_imagen_producto C##finnk.tab_catalogo_productos.imagen_producto%TYPE;

  
   OPEN c_productos;
  FETCH c_productos INTO v_id_catalogo, v_imagen_producto, ...;
  
   LOOP
    DBMS_OUTPUT.PUT_LINE('ID_Catalogo: ' || v_id_catalogo);
    DBMS_OUTPUT.PUT_LINE('Imagen_Producto: ' || v_imagen_producto);
    
     FETCH c_productos INTO v_id_catalogo, v_imagen_producto, ...;
    
      EXIT WHEN c_productos%NOTFOUND;
  END LOOP;
  
  CLOSE c_productos;
END;


--P21--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerNumeroProductos(
  p_numero_productos OUT NUMBER
) AS
BEGIN
  SELECT COUNT(*)
  INTO p_numero_productos
  FROM C##finnk.tab_catalogo_productos;
END;


--P22--
CREATE OR REPLACE PROCEDURE C##finnk.ObtenerEmpleadosPorSalarioMinimo AS
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE;
  v_nombre_empleado C##finnk.tab_listado_empleados.nombre_empleado%TYPE;

BEGIN
  DECLARE
    v_salario_minimo C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT MIN(salario_empleado) INTO v_salario_minimo FROM C##finnk.tab_listado_empleados;
    
    FOR emp IN (SELECT *
                FROM C##finnk.tab_listado_empleados
                WHERE salario_empleado >= v_salario_minimo)
    LOOP
      v_id_empleado := emp.id_empleado;
      v_nombre_empleado := emp.nombre_empleado;
      
      DBMS_OUTPUT.PUT_LINE('ID_Empleado: ' || v_id_empleado);
      DBMS_OUTPUT.PUT_LINE('Nombre_Empleado: ' || v_nombre_empleado);
    END LOOP;
  END;
END;


--P24--
CREATE OR REPLACE PROCEDURE C##finnk.InsertarTienda(
  p_id_tienda IN C##finnk.tab_listado_tienda.id_tienda%TYPE,
  p_localidad_tienda IN C##finnk.tab_listado_tienda.localidad_tienda%TYPE,
  p_estado_tienda IN C##finnk.tab_listado_tienda.estado_tienda%TYPE
) AS
BEGIN
  INSERT INTO C##finnk.tab_listado_tienda(id_tienda, localidad_tienda, estado_tienda)
  VALUES (p_id_tienda, p_localidad_tienda, p_estado_tienda);
  COMMIT;
END;


--P25--
CREATE OR REPLACE PROCEDURE C##finnk.ActualizarExistenciasProducto(
  p_id_catalogo IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE,
  p_existencias_producto IN C##finnk.tab_catalogo_productos.existencias_producto%TYPE
) AS
BEGIN
  UPDATE C##finnk.tab_catalogo_productos
  SET existencias_producto = p_existencias_producto
  WHERE id_catalogo = p_id_catalogo;
  COMMIT;
END;



--VISTAS--
--VISTA 1
--Vista que muestre el id,nombre, apellido y salario de todos los empleados 
--con salarios iguales o inferiores al promedio de salarios en la tabla Tab_Listado_Empleados 
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados AS
SELECT id_empleado, nombre_empleado, apellidos_empleado, salario_empleado
FROM C##finnk.tab_listado_empleados 
WHERE salario_empleado <= (SELECT AVG(salario_empleado) FROM C##finnk.tab_listado_empleados); 

SELECT * FROM C##finnk.Vista_Empleados;

--VISTA 2
--Vista que muestre el nombre de cada departamento, id de cada empleado y el nombre del empleado. Todo lo anterior debe mostrarse en una sola columna, separando cada valor con un guion (-). 
CREATE OR REPLACE VIEW C##finnk.Vista_Cliente AS
SELECT  id_cliente || '-' || correo_cliente  AS Informacion_Cliente
FROM C##finnk.tab_listado_clientes;

SELECT Informacion_Cliente FROM C##finnk.Vista_Cliente;

--VISTA 3
--Crear una vista que muestre el nombre, correo, el id del reclamo y el reclamo del cliente
CREATE OR REPLACE VIEW C##finnk.Vista_Reclamos AS
SELECT 
    c.id_cliente AS ID_Cliente,
    c.correo_cliente AS Correo_Cliente,
    r.comentario_reclamo AS Reclamo
FROM 
    C##finnk.tab_listado_clientes c
JOIN 
    C##finnk.tab_listado_reclamos r ON c.id_cliente = r.fk_reclamos;

SELECT * FROM C##finnk.Vista_Reclamos;

--VISTA 4
--Ordenar los productos por orden alfabético con su nombre
CREATE OR REPLACE VIEW C##finnk.Vista_Productos_Alfab AS
SELECT id_catalogo , nombre_producto 
FROM C##finnk.tab_catalogo_productos
ORDER BY nombre_producto;

SELECT * FROM C##finnk.Vista_Productos_Alfab;

--VISTA 5
---Ordenar el precio de los productos de mayor a menor
CREATE OR REPLACE VIEW C##finnk.Vista_Productos_May_Men AS
SELECT * FROM C##finnk.tab_catalogo_productos
ORDER BY precio_producto ASC;

SELECT * FROM C##finnk.Vista_Productos_May_Men;

--VISTA 6
--Mostrar la cantidad total de empleados
CREATE OR REPLACE VIEW C##finnk.Vista_Total_Empleados AS
SELECT COUNT(*) "CANTIDAD DE EMPLEADOS" FROM C##finnk.tab_listado_empleados; -- EMPLEADOS EN TOTAL --Cuenta filas con o sin valor

SELECT * FROM C##finnk.Vista_Total_Empleados;
--VISTA 7
--Mostrar el salario total de todos los empleados
CREATE OR REPLACE VIEW C##finnk.Vista_Empleados_Salarios AS
SELECT sum(salario_empleado) "TOTAL DE SALARIO" FROM C##finnk.tab_listado_empleados; --SUMA UNA COLUMNA

SELECT * FROM C##finnk.Vista_Empleados_Salarios;

--VISTA 8
--Conteo y agrupamientos de los empleados por puesto , debe de imprimir el puesto y la cantidad de empleados para ese puesto 
CREATE OR REPLACE VIEW C##finnk.Vista_Empleado_Puesto AS
SELECT puesto_empleado,
 COUNT(*) AS Conteo_Empleados
FROM
C##finnk.tab_listado_empleados
GROUP BY
puesto_empleado;

SELECT * FROM C##finnk.Vista_Empleado_Puesto;

--VISTA 9
--Mostrar todos los productos que tengan estado = true
CREATE OR REPLACE VIEW C##finnk.Vista_Productos_True AS
SELECT id_catalogo,nombre_producto, estado_producto
FROM
 C##finnk.tab_catalogo_productos
WHERE
estado_producto = 'Y';

SELECT * FROM C##finnk.Vista_Productos_True;

--VISTA 10
--Mostrar todos los proveedores que sean Costarricenses
CREATE OR REPLACE VIEW C##finnk.Vista_Proveedores AS
SELECT id_proveedor,nombre_proveedor, nacionalidad_proveedor
FROM
 C##finnk.tab_listado_proveedores
WHERE
 nacionalidad_proveedor = 'Costarricense';
 
SELECT * FROM C##finnk.Vista_Proveedores;

---CURSORES---
--cursor 1

DECLARE
   CURSOR correos_clientes_cursor IS
      SELECT correo_cliente FROM C##finnk.tab_listado_clientes c;
   correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
   OPEN correos_clientes_cursor;
   LOOP
      FETCH correos_clientes_cursor INTO correo_cliente;
      EXIT WHEN correos_clientes_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Correo cliente: ' || correo_cliente); 
   END LOOP;
   CLOSE correos_clientes_cursor;
END;



--cursor 2

DECLARE
   CURSOR productos_cursor IS
      SELECT id_catalogo, imagen_producto, nombre_producto, precio_producto, existencias_producto, estado_producto
      FROM C##finnk.tab_catalogo_productos
      WHERE precio_producto <= 10000;
   producto_rec productos_cursor%ROWTYPE;
   BEGIN
   OPEN productos_cursor;
   LOOP
      FETCH productos_cursor INTO producto_rec;
      EXIT WHEN productos_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('ID: ' || producto_rec.id_catalogo ||
                           ', Imagen: ' || producto_rec.imagen_producto ||
                           ', Nombre: ' || producto_rec.nombre_producto ||
                           ', Precio: ' || producto_rec.precio_producto ||
                           ', Existencias: ' || producto_rec.existencias_producto ||
                           ', Estado: ' || producto_rec.estado_producto);
   END LOOP;   
   CLOSE productos_cursor;
END;

--cursor 3 
DECLARE
   CURSOR empleados_cursor IS
      SELECT id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, telefono_empleado, 
      salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado
      FROM  C##finnk.tab_listado_empleados
      WHERE estado_empleado = 'N';
   empleado_rec empleados_cursor%ROWTYPE;
   BEGIN
   OPEN empleados_cursor;
   LOOP
      FETCH empleados_cursor INTO empleado_rec;
      EXIT WHEN empleados_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('ID: ' || empleado_rec.id_empleado ||
                           ', Nombre: ' || empleado_rec.nombre_empleado ||
                           ', Apellidos: ' || empleado_rec.apellidos_empleado ||
                           ', Correo: ' || empleado_rec.correo_empleado ||
                           ', Teléfono: ' || empleado_rec.telefono_empleado ||
                           ', Salario: ' || empleado_rec.salario_empleado ||
                           ', Puesto: ' || empleado_rec.puesto_empleado ||
                           ', Nacionalidad: ' || empleado_rec.nacionalidad_empleado ||
                           ', Estado: ' || empleado_rec.estado_empleado);
   END LOOP;
   CLOSE empleados_cursor;
END;

--cursor 4
DECLARE
   CURSOR empleados_cursor IS
      SELECT id_empleado, nombre_empleado, apellidos_empleado, correo_empleado, 
      telefono_empleado, salario_empleado, puesto_empleado, nacionalidad_empleado, estado_empleado
      FROM  C##finnk.tab_listado_empleados
      WHERE salario_empleado >=250000 ;
   empleado_rec empleados_cursor%ROWTYPE;
   BEGIN
   OPEN empleados_cursor;
   LOOP
      FETCH empleados_cursor INTO empleado_rec;
      EXIT WHEN empleados_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('ID: ' || empleado_rec.id_empleado ||
                           ', Nombre: ' || empleado_rec.nombre_empleado ||
                           ', Apellidos: ' || empleado_rec.apellidos_empleado ||
                           ', Correo: ' || empleado_rec.correo_empleado ||
                           ', Teléfono: ' || empleado_rec.telefono_empleado ||
                           ', Salario: ' || empleado_rec.salario_empleado ||
                           ', Puesto: ' || empleado_rec.puesto_empleado ||
                           ', Nacionalidad: ' || empleado_rec.nacionalidad_empleado ||
                           ', Estado: ' || empleado_rec.estado_empleado);
   END LOOP;
   CLOSE empleados_cursor;
END;

--cursor 5 
DECLARE
   CURSOR productos_cursor IS
      SELECT id_catalogo, imagen_producto, nombre_producto, precio_producto, existencias_producto, estado_producto
      FROM C##finnk.tab_catalogo_productos
      WHERE existencias_producto >= 10;
BEGIN
   FOR producto_rec IN productos_cursor
   LOOP
      DBMS_OUTPUT.PUT_LINE('ID: ' || producto_rec.id_catalogo ||
                           ', Imagen: ' || producto_rec.imagen_producto ||
                           ', Nombre: ' || producto_rec.nombre_producto ||
                           ', Precio: ' || producto_rec.precio_producto ||
                           ', Existencias: ' || producto_rec.existencias_producto ||
                           ', Estado: ' || producto_rec.estado_producto);
   END LOOP;
END;


--cursor 6
DECLARE
   CURSOR proveedores_cursor IS
      SELECT id_proveedor, nombre_proveedor, apellidos_proveedor, correo_proveedor, 
      telefono_proveedor, marca_proveedor, nacionalidad_proveedor, estado_proveedor
      FROM C##finnk.tab_listado_proveedores
      WHERE nacionalidad_proveedor = 'Costarricense';
   proveedor_rec proveedores_cursor%ROWTYPE;
BEGIN
   OPEN proveedores_cursor;

   FETCH proveedores_cursor INTO proveedor_rec;
   WHILE proveedores_cursor%FOUND
   LOOP
      DBMS_OUTPUT.PUT_LINE('ID: ' || proveedor_rec.id_proveedor ||
                           ', Nombre: ' || proveedor_rec.nombre_proveedor ||
                           ', Apellidos: ' || proveedor_rec.apellidos_proveedor ||
                           ', Correo: ' || proveedor_rec.correo_proveedor ||
                           ', Teléfono: ' || proveedor_rec.telefono_proveedor ||
                           ', Marca: ' || proveedor_rec.marca_proveedor ||
                           ', Nacionalidad: ' || proveedor_rec.nacionalidad_proveedor ||
                           ', Estado: ' || proveedor_rec.estado_proveedor);
      FETCH proveedores_cursor INTO proveedor_rec;
   END LOOP;
   CLOSE proveedores_cursor;
END;

-- Cursor 7: Lista las nacionalidades unicas de los empleados

DECLARE
   CURSOR empleados_nacionalidad_cursor IS
      SELECT DISTINCT nacionalidad_empleado
      FROM C##finnk.tab_listado_empleados;
   nacionalidad_empleado C##finnk.tab_listado_empleados.nacionalidad_empleado%TYPE;
BEGIN
   OPEN empleados_nacionalidad_cursor;
   LOOP
      FETCH empleados_nacionalidad_cursor INTO nacionalidad_empleado;
      EXIT WHEN empleados_nacionalidad_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Nacionalidad empleado: ' || nacionalidad_empleado);
   END LOOP;
   CLOSE empleados_nacionalidad_cursor;
END;

-- Cursor 8: Lista los productos con bajo stock (menos de 5 unidades en stock)

DECLARE
   CURSOR productos_bajo_stock_cursor IS
      SELECT id_catalogo, nombre_producto, existencias_producto
      FROM C##finnk.tab_catalogo_productos
      WHERE existencias_producto < 5;
   producto_bajo_stock_rec productos_bajo_stock_cursor%ROWTYPE;
BEGIN
   OPEN productos_bajo_stock_cursor;
   LOOP
      FETCH productos_bajo_stock_cursor INTO producto_bajo_stock_rec;
      EXIT WHEN productos_bajo_stock_cursor%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('ID: ' || producto_bajo_stock_rec.id_catalogo ||
                           ', Nombre: ' || producto_bajo_stock_rec.nombre_producto ||
                           ', Existencias: ' || producto_bajo_stock_rec.existencias_producto);
   END LOOP;
   CLOSE productos_bajo_stock_cursor;
END;

-- Cursor 9: Lista los correos de los proveedores
DECLARE
   CURSOR proveedores_correo_cursor IS
      SELECT correo_proveedor
      FROM C##finnk.tab_listado_proveedores;
   correo_proveedor C##finnk.tab_listado_proveedores.correo_proveedor%TYPE;
BEGIN
   OPEN proveedores_correo_cursor;
   LOOP
      FETCH proveedores_correo_cursor INTO correo_proveedor;
      EXIT WHEN proveedores_correo_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Correo del proveedor: ' || correo_proveedor);
   END LOOP;
   CLOSE proveedores_correo_cursor;
END;

-- Cursor 10: Lista los productos inactivos en el catalogo
DECLARE
   CURSOR productos_inactivos_cursor IS
      SELECT id_catalogo, nombre_producto, estado_producto
      FROM C##finnk.tab_catalogo_productos
      WHERE estado_producto = 'Inactivo';
   producto_inactivo_rec productos_inactivos_cursor%ROWTYPE;
BEGIN
   OPEN productos_inactivos_cursor;
   LOOP
      FETCH productos_inactivos_cursor INTO producto_inactivo_rec;
      EXIT WHEN productos_inactivos_cursor%NOTFOUND;

      DBMS_OUTPUT.PUT_LINE('ID: ' || producto_inactivo_rec.id_catalogo ||
                           ', Nombre: ' || producto_inactivo_rec.nombre_producto ||
                           ', Estado: ' || producto_inactivo_rec.estado_producto);
   END LOOP;
   CLOSE productos_inactivos_cursor;
END;

-- Cursor 11: Lista los nombres de los proveedores y su nacionalidad
DECLARE
   CURSOR proveedores_nacionalidad_cursor IS
      SELECT DISTINCT nacionalidad_proveedor
      FROM C##finnk.tab_listado_proveedores;
   nacionalidad_proveedor C##finnk.tab_listado_proveedores.nacionalidad_proveedor%TYPE;
BEGIN
   OPEN proveedores_nacionalidad_cursor;
   LOOP
      FETCH proveedores_nacionalidad_cursor INTO nacionalidad_proveedor;
      EXIT WHEN proveedores_nacionalidad_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Nacionalidad proveedor: ' || nacionalidad_proveedor);
   END LOOP;

   CLOSE proveedores_nacionalidad_cursor;
END;

-- Cursor 12: Lista los empleados con salarios mas altos
DECLARE
   CURSOR empleados_salarios_altos_cursor IS
      SELECT id_empleado, nombre_empleado, apellidos_empleado, salario_empleado
      FROM C##finnk.tab_listado_empleados
      WHERE salario_empleado >= (SELECT MAX(salario_empleado) FROM C##finnk.tab_listado_empleados);
   empleado_salario_alto_rec empleados_salarios_altos_cursor%ROWTYPE;
BEGIN
   OPEN empleados_salarios_altos_cursor;
   LOOP
      FETCH empleados_salarios_altos_cursor INTO empleado_salario_alto_rec;
      EXIT WHEN empleados_salarios_altos_cursor%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('ID: ' || empleado_salario_alto_rec.id_empleado ||
                           ', Nombre: ' || empleado_salario_alto_rec.nombre_empleado ||
                           ', Apellidos: ' || empleado_salario_alto_rec.apellidos_empleado ||
                           ', Salario: ' || empleado_salario_alto_rec.salario_empleado);
   END LOOP;
   CLOSE empleados_salarios_altos_cursor;
END;


-- Cursor 13: Lista los productos activos con existencias mayores o iguales a 50

DECLARE
   CURSOR productos_activos_existencias_cursor IS
      SELECT id_catalogo, nombre_producto, existencias_producto
      FROM C##finnk.tab_catalogo_productos
      WHERE estado_producto = 'Activo' AND existencias_producto >= 50;
   producto_activo_existencias_rec productos_activos_existencias_cursor%ROWTYPE;
BEGIN
   OPEN productos_activos_existencias_cursor;
   LOOP
      FETCH productos_activos_existencias_cursor INTO producto_activo_existencias_rec;
      EXIT WHEN productos_activos_existencias_cursor%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('ID: ' || producto_activo_existencias_rec.id_catalogo ||
                           ', Nombre: ' || producto_activo_existencias_rec.nombre_producto ||
                           ', Existencias: ' || producto_activo_existencias_rec.existencias_producto);
   END LOOP;
   CLOSE productos_activos_existencias_cursor;
END;

-- Cursor 14: Lista los empleados con salario entre 200000 y 300000

DECLARE
   CURSOR empleados_salario_rango_cursor IS
      SELECT id_empleado, nombre_empleado, apellidos_empleado, salario_empleado
      FROM C##finnk.tab_listado_empleados
      WHERE salario_empleado BETWEEN 200000 AND 300000;
   empleado_salario_rango_rec empleados_salario_rango_cursor%ROWTYPE;
BEGIN
   OPEN empleados_salario_rango_cursor;
   LOOP
      FETCH empleados_salario_rango_cursor INTO empleado_salario_rango_rec;
      EXIT WHEN empleados_salario_rango_cursor%NOTFOUND;
      
      DBMS_OUTPUT.PUT_LINE('ID: ' || empleado_salario_rango_rec.id_empleado ||
                           ', Nombre: ' || empleado_salario_rango_rec.nombre_empleado ||
                           ', Apellidos: ' || empleado_salario_rango_rec.apellidos_empleado ||
                           ', Salario: ' || empleado_salario_rango_rec.salario_empleado);
   END LOOP;
   CLOSE empleados_salario_rango_cursor;
END;


-- Cursor 15: Lista los clientes con correo que incluya "gmail.com"

DECLARE
   CURSOR clientes_gmail_cursor IS
      SELECT correo_cliente
      FROM C##finnk.tab_listado_clientes
      WHERE correo_cliente LIKE '%gmail.com';
   correo_cliente_gmail C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
   OPEN clientes_gmail_cursor;
   LOOP
      FETCH clientes_gmail_cursor INTO correo_cliente_gmail;
      EXIT WHEN clientes_gmail_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Correo cliente con Gmail: ' || correo_cliente_gmail);
   END LOOP;
   CLOSE clientes_gmail_cursor;
END;

---------------------------------------------------------------------------------------------
--FUNCIONES--
--F1--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerCorreoClientePorID(
  p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
) RETURN VARCHAR2 AS
  v_correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
BEGIN
  SELECT correo_cliente INTO v_correo_cliente
  FROM C##finnk.tab_listado_clientes
  WHERE id_cliente = p_id_cliente;
  
  RETURN v_correo_cliente;
END;
-- Ejecutando Funcion 1 mediante id 1
DECLARE
  v_email VARCHAR2(100);
BEGIN
  v_email := C##finnk.ObtenerCorreoClientePorID(1);
  DBMS_OUTPUT.PUT_LINE('Email: ' || v_email);
END;


--F2--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerPrecioProductoPorID(
  p_id_producto IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE
) RETURN NUMBER AS
  v_precio_producto C##finnk.tab_catalogo_productos.precio_producto%TYPE;
BEGIN
  SELECT precio_producto INTO v_precio_producto
  FROM C##finnk.tab_catalogo_productos
  WHERE id_catalogo = p_id_producto;
  
  RETURN v_precio_producto;
END;

--Ejecutando Funcion mediante id 5 para obtener precio
DECLARE
  v_price NUMBER;
  v_product_id NUMBER := 5;
BEGIN
  v_price := C##finnk.ObtenerPrecioProductoPorID(v_product_id);
  DBMS_OUTPUT.PUT_LINE('Precio: ' || v_price);
END;


select * from C##finnk.tab_listado_proveedores;
--F3--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerProveedoresPorEstadoFunc(
  p_estado_proveedor IN C##finnk.tab_listado_proveedores.estado_proveedor%TYPE
) RETURN SYS_REFCURSOR AS
  v_proveedores SYS_REFCURSOR;
BEGIN
  OPEN v_proveedores FOR
    SELECT *
    FROM C##finnk.tab_listado_proveedores
    WHERE estado_proveedor = p_estado_proveedor;
  
  RETURN v_proveedores;
END;

--Ejecutando funcion 3 en donde se ejecutan los unicos que estan en estado True o Y
DECLARE
  v_estado_proveedor C##finnk.tab_listado_proveedores.estado_proveedor%TYPE := 'Y';
  v_cursor SYS_REFCURSOR;
  v_row C##finnk.tab_listado_proveedores%ROWTYPE;
BEGIN
  v_cursor := C##finnk.ObtenerProveedoresPorEstadoFunc(v_estado_proveedor);
  
  LOOP
    FETCH v_cursor INTO v_row;
    EXIT WHEN v_cursor%NOTFOUND;
    
    DBMS_OUTPUT.PUT_LINE('ID Proveedor: ' || v_row.id_proveedor || ', Nombre: ' || v_row.nombre_proveedor);
  END LOOP;
  
  CLOSE v_cursor;
END;

--F4--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerEmpleadosPorTiendaFunc(
  p_id_tienda IN C##finnk.tab_listado_tienda.id_tienda%TYPE
) RETURN SYS_REFCURSOR AS
  v_empleados SYS_REFCURSOR;
BEGIN
  OPEN v_empleados FOR
    SELECT *
    FROM C##finnk.tab_listado_empleados
    WHERE fk_tienda = p_id_tienda;
  
  RETURN v_empleados;
END;


-- Ejecuta la funcion 4 donde se le envia id 1 para verificar el empleado en esa tienda
DECLARE
  v_id_tienda C##finnk.tab_listado_tienda.id_tienda%TYPE := 1;
  v_cursor SYS_REFCURSOR;
  v_row C##finnk.tab_listado_empleados%ROWTYPE;
BEGIN
  v_cursor := C##finnk.ObtenerEmpleadosPorTiendaFunc(v_id_tienda);
  
  LOOP
    FETCH v_cursor INTO v_row;
    EXIT WHEN v_cursor%NOTFOUND;
    
    DBMS_OUTPUT.PUT_LINE('ID Empleado: ' || v_row.id_empleado || ', Nombre: ' || v_row.nombre_empleado);
  END LOOP;
  
  CLOSE v_cursor;
END;


--F5--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerReclamoPorID(
  p_id_reclamo IN C##finnk.tab_listado_reclamos.id_reclamos%TYPE
) RETURN VARCHAR2 AS
  v_comentario_reclamo C##finnk.tab_listado_reclamos.comentario_reclamo%TYPE;
BEGIN
  SELECT comentario_reclamo INTO v_comentario_reclamo
  FROM C##finnk.tab_listado_reclamos
  WHERE id_reclamos = p_id_reclamo;
  
  RETURN v_comentario_reclamo;
END;


--Llama la funcion 5 Se obtiene comentario mediante id 1
DECLARE
  v_id_reclamo C##finnk.tab_listado_reclamos.id_reclamos%TYPE := 1; -- Cambiar por el ID de reclamo deseado
  v_comentario_reclamo VARCHAR2(4000); -- Ajusta la longitud según tus necesidades
BEGIN
  v_comentario_reclamo := C##finnk.ObtenerReclamoPorID(v_id_reclamo);
  DBMS_OUTPUT.PUT_LINE('Comentario de reclamo: ' || v_comentario_reclamo);
END;


--F6--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerEstadoProveedorPorID(
  p_id_proveedor IN C##finnk.tab_listado_proveedores.id_proveedor%TYPE
) RETURN CHAR AS
  v_estado_proveedor C##finnk.tab_listado_proveedores.estado_proveedor%TYPE;
BEGIN
  SELECT estado_proveedor INTO v_estado_proveedor
  FROM C##finnk.tab_listado_proveedores
  WHERE id_proveedor = p_id_proveedor;
  
  RETURN v_estado_proveedor;
END;

--LLama a la funcion 6 lo que realiza es obtener el estado del proveedor mediante id

DECLARE
  v_id_proveedor C##finnk.tab_listado_proveedores.id_proveedor%TYPE := 1; -- Cambiar por el ID de proveedor deseado
  v_estado CHAR(1);
BEGIN
  v_estado := C##finnk.ObtenerEstadoProveedorPorID(v_id_proveedor);
  DBMS_OUTPUT.PUT_LINE('Estado del proveedor: ' || v_estado);
END;


--F7--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerTotalReclamosFunc RETURN NUMBER AS
  v_total_reclamos NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_total_reclamos
  FROM C##finnk.tab_listado_reclamos;
  
  RETURN v_total_reclamos;
END;

--Llama a la funcion 7 y obtiene los reclamos totales

DECLARE
  v_total_reclamos NUMBER;
BEGIN
  v_total_reclamos := C##finnk.ObtenerTotalReclamosFunc();
  DBMS_OUTPUT.PUT_LINE('Total de reclamos: ' || v_total_reclamos);
END;


--F8--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerNombreEmpleadoPorID(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
) RETURN VARCHAR2 AS
  v_nombre_empleado VARCHAR2(80);
BEGIN
  SELECT nombre_empleado || ' ' || apellidos_empleado INTO v_nombre_empleado
  FROM C##finnk.tab_listado_empleados
  WHERE id_empleado = p_id_empleado;
  
  RETURN v_nombre_empleado;
END;

--Ejecuta la funcion 8 se prueba con id para obtener el empleado 
DECLARE
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE := 1;
  v_nombre VARCHAR2(80);
BEGIN
  v_nombre := C##finnk.ObtenerNombreEmpleadoPorID(v_id_empleado);
  DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || v_nombre);
END;



--F9--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerNumeroTiendasPorLocalidadFunc(
  p_localidad_tienda IN C##finnk.tab_listado_tienda.localidad_tienda%TYPE
) RETURN NUMBER AS
  v_numero_tiendas NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_numero_tiendas
  FROM C##finnk.tab_listado_tienda
  WHERE localidad_tienda = p_localidad_tienda;
  
  RETURN v_numero_tiendas;
END;

--Ejecuta la funcion 9 y obtiene el numero de tiendas por localidad

DECLARE
  v_localidad_tienda C##finnk.tab_listado_tienda.localidad_tienda%TYPE := 'Cartago';
  v_numero_tiendas NUMBER;
BEGIN
  v_numero_tiendas := C##finnk.ObtenerNumeroTiendasPorLocalidadFunc(v_localidad_tienda);
  DBMS_OUTPUT.PUT_LINE('Número de tiendas en ' || v_localidad_tienda || ': ' || v_numero_tiendas);
END;



--F10--
select * from C##finnk.tab_listado_empleados;
CREATE OR REPLACE FUNCTION C##finnk.ObtenerEmpleadoPorCorreo(
  p_correo_empleado IN C##finnk.tab_listado_empleados.correo_empleado%TYPE
) RETURN C##finnk.tab_listado_empleados%ROWTYPE AS
  v_empleado C##finnk.tab_listado_empleados%ROWTYPE;
BEGIN
  SELECT *
  INTO v_empleado
  FROM C##finnk.tab_listado_empleados
  WHERE correo_empleado = p_correo_empleado;
  
  RETURN v_empleado;
END;

--Ejecuta funcion 10 se le pasa un correo existente y retorna id y nombre del emepleado
DECLARE
  v_correo_empleado C##finnk.tab_listado_empleados.correo_empleado%TYPE := 'olmanefr@gmail.com'; -- Cambiar por el correo deseado
  v_resultado C##finnk.tab_listado_empleados%ROWTYPE;
BEGIN
  v_resultado := C##finnk.ObtenerEmpleadoPorCorreo(v_correo_empleado);
  
  DBMS_OUTPUT.PUT_LINE('ID Empleado: ' || v_resultado.id_empleado || ', Nombre: ' || v_resultado.nombre_empleado);
END;



--F11-
select * from C##finnk.tab_listado_tienda;
CREATE OR REPLACE FUNCTION C##finnk.ObtenerEstadoTiendaPorID(
  p_id_tienda IN C##finnk.tab_listado_tienda.id_tienda%TYPE
) RETURN CHAR AS
  v_estado_tienda C##finnk.tab_listado_tienda.estado_tienda%TYPE;
BEGIN
  SELECT estado_tienda INTO v_estado_tienda
  FROM C##finnk.tab_listado_tienda
  WHERE id_tienda = p_id_tienda;
  
  RETURN v_estado_tienda;
END;

--Ejecuta Funcion 11 retorna el estado de tienda por el id 
DECLARE
  v_id_tienda C##finnk.tab_listado_tienda.id_tienda%TYPE := 1; 
  v_estado CHAR(1);
BEGIN
  v_estado := C##finnk.ObtenerEstadoTiendaPorID(v_id_tienda);
  DBMS_OUTPUT.PUT_LINE('Estado de la tienda: ' || v_estado);
END;



--F12--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerSalarioEmpleadoPorID(
  p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
) RETURN NUMBER AS
  v_salario_empleado C##finnk.tab_listado_empleados.salario_empleado%TYPE;
BEGIN
  SELECT salario_empleado INTO v_salario_empleado
  FROM C##finnk.tab_listado_empleados
  WHERE id_empleado = p_id_empleado;
  
  RETURN v_salario_empleado;
END;

--Obtiene el salario del empleado por el id proporcionado

DECLARE
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE := 1; 
  v_salario NUMBER;
BEGIN
  v_salario := C##finnk.ObtenerSalarioEmpleadoPorID(v_id_empleado);
  DBMS_OUTPUT.PUT_LINE('Salario de empleado: ' || v_salario);
END;


--F13--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerProductoPorID(
  p_id_producto IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE
) RETURN C##finnk.tab_catalogo_productos%ROWTYPE AS
  v_producto C##finnk.tab_catalogo_productos%ROWTYPE;
BEGIN
  SELECT *
  INTO v_producto
  FROM C##finnk.tab_catalogo_productos
  WHERE id_catalogo = p_id_producto;
  
  RETURN v_producto;
END;


--Ejecuta la funcion 13 retonrna producto por el id 
DECLARE
  v_id_producto C##finnk.tab_catalogo_productos.id_catalogo%TYPE := 1; 
  v_resultado C##finnk.tab_catalogo_productos%ROWTYPE;
BEGIN
  v_resultado := C##finnk.ObtenerProductoPorID(v_id_producto);
  
  DBMS_OUTPUT.PUT_LINE('ID Producto: ' || v_resultado.id_catalogo || ', Nombre: ' || v_resultado.nombre_producto);
END;



--F14--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerNumeroClientesFunc RETURN NUMBER AS
  v_numero_clientes NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_numero_clientes
  FROM C##finnk.tab_listado_clientes;
  
  RETURN v_numero_clientes;
END;

--Ejecuta la funcion 14 la cual impriume el numero total de clientes

DECLARE
  v_total_clientes NUMBER;
BEGIN
  v_total_clientes := C##finnk.ObtenerNumeroClientesFunc();
  DBMS_OUTPUT.PUT_LINE('Número total de clientes: ' || v_total_clientes);
END;


--F15--
CREATE OR REPLACE FUNCTION C##finnk.ObtenerNombreProveedorPorID(
  p_id_proveedor IN C##finnk.tab_listado_proveedores.id_proveedor%TYPE
) RETURN VARCHAR2 AS
  v_nombre_proveedor VARCHAR2(80);
BEGIN
  SELECT nombre_proveedor || ' ' || apellidos_proveedor INTO v_nombre_proveedor
  FROM C##finnk.tab_listado_proveedores
  WHERE id_proveedor = p_id_proveedor;
  
  RETURN v_nombre_proveedor;
END;

--Ejecuta la funcion 15 y retorna el nombre del proveedor por el id

DECLARE
  v_id_proveedor C##finnk.tab_listado_proveedores.id_proveedor%TYPE := 1; 
  v_nombre VARCHAR2(80);
BEGIN
  v_nombre := C##finnk.ObtenerNombreProveedorPorID(v_id_proveedor);
  DBMS_OUTPUT.PUT_LINE('Nombre del proveedor: ' || v_nombre);
END;


--Triggers?
--Trig1--
--Verifica si el correo electrónico del cliente ya existe en la tabla. Si el correo electrónico ya existe,
--el trigger lanzará un mensaje de error y cancelará la inserción.

CREATE OR REPLACE TRIGGER C##finnk.TRIGGER_TAB_LISTADO_CLIENTES
BEFORE INSERT ON C##finnk.tab_listado_clientes
FOR EACH ROW
DECLARE
    v_correo_existente NUMBER;
BEGIN
    -- Verificar si el correo electrónico ya existe en la tabla
    SELECT COUNT(*) INTO v_correo_existente FROM C##finnk.tab_listado_clientes WHERE correo_cliente = :NEW.correo_cliente;
    
    IF v_correo_existente > 0 THEN
        -- Mostrar un mensaje de error si el correo electrónico ya existe
        raise_application_error(-20001, 'El correo electrónico ya está registrado en la tabla.');
    END IF;
END;


--Trig2--
--Mostrará la información sobre la acción realizada (inserción, actualización o eliminación) y el ID del producto deseado.
CREATE OR REPLACE TRIGGER C##finnk.TRIGGER_TAB_CATALOGO_PRODUCTOS
AFTER INSERT OR UPDATE OR DELETE ON C##finnk.tab_catalogo_productos
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('Se ha insertado un nuevo producto con ID: ' || :NEW.id_catalogo);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('Se ha actualizado el producto con ID: ' || :NEW.id_catalogo);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('Se ha eliminado el producto con ID: ' || :OLD.id_catalogo);
    END IF;
END;

--Trig3
--Mostrará la información sobre el proveedor recién insertado, incluyendo su ID, nombre, apellidos, correo, teléfono, marca y nacionalidad.
CREATE OR REPLACE TRIGGER C##finnk.TRIGGER_INSERT_PROVEEDOR
AFTER INSERT ON C##finnk.tab_listado_proveedores
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Se ha insertado un nuevo proveedor con ID: ' || :NEW.id_proveedor);
    DBMS_OUTPUT.PUT_LINE('Nombre del proveedor: ' || :NEW.nombre_proveedor || ' ' || :NEW.apellidos_proveedor);
    DBMS_OUTPUT.PUT_LINE('Correo del proveedor: ' || :NEW.correo_proveedor);
    DBMS_OUTPUT.PUT_LINE('Teléfono del proveedor: ' || :NEW.telefono_proveedor);
    DBMS_OUTPUT.PUT_LINE('Marca del proveedor: ' || :NEW.marca_proveedor);
    DBMS_OUTPUT.PUT_LINE('Nacionalidad del proveedor: ' || :NEW.nacionalidad_proveedor);
END;

--Trig4?
--Mostrará la  información sobre el empleado recién insertado, incluyendo su ID, nombre, apellidos, correo, teléfono, salario, puesto, nacionalidad y el ID de la tienda a la que pertenece
CREATE OR REPLACE TRIGGER C##finnk.TRIGGER_INSERT_EMPLEADO
AFTER INSERT ON C##finnk.tab_listado_empleados
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Se ha insertado un nuevo empleado con ID: ' || :NEW.id_empleado);
    DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || :NEW.nombre_empleado || ' ' || :NEW.apellidos_empleado);
    DBMS_OUTPUT.PUT_LINE('Correo del empleado: ' || :NEW.correo_empleado);
    DBMS_OUTPUT.PUT_LINE('Teléfono del empleado: ' || :NEW.telefono_empleado);
    DBMS_OUTPUT.PUT_LINE('Salario del empleado: ' || :NEW.salario_empleado);
    DBMS_OUTPUT.PUT_LINE('Puesto del empleado: ' || :NEW.puesto_empleado);
    DBMS_OUTPUT.PUT_LINE('Nacionalidad del empleado: ' || :NEW.nacionalidad_empleado);
    DBMS_OUTPUT.PUT_LINE('ID de la tienda a la que pertenece: ' || :NEW.fk_tienda);
END;

--Trig5?
--Verifica que la localidad de la tienda sea válida y el estado de la tienda esté en 'Y' o 'N'.
CREATE OR REPLACE TRIGGER C##finnk.TRIGGER_TIENDA
BEFORE INSERT ON C##finnk.tab_listado_tienda
FOR EACH ROW
BEGIN
    -- Verificar que la localidad de la tienda sea válida
    IF :NEW.localidad_tienda IS NULL OR LENGTH(:NEW.localidad_tienda) > 40 THEN
        RAISE_APPLICATION_ERROR(-20001, 'La localidad de la tienda no es válida.');
    END IF;
    
    -- Verificar que el estado de la tienda sea 'Y' o 'N'
    IF :NEW.estado_tienda NOT IN ('Y', 'N') THEN
        RAISE_APPLICATION_ERROR(-20002, 'El estado de la tienda debe ser "Y" o "N".');
    END IF;
END;

--Paquetes--
SET SERVEROUTPUT ON
--Pkg1
-- Obtener el correo electrónico de un cliente a partir de su ID de cliente.
CREATE OR REPLACE PACKAGE C##finnk.paquete_funciones AS
  FUNCTION ObtenerCorreoClientePorID(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
  ) RETURN VARCHAR2;
END;
CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_funciones AS
  FUNCTION ObtenerCorreoClientePorID(
    p_id_cliente IN C##finnk.tab_listado_clientes.id_cliente%TYPE
  ) RETURN VARCHAR2 AS
    v_correo_cliente C##finnk.tab_listado_clientes.correo_cliente%TYPE;
  BEGIN
    SELECT correo_cliente INTO v_correo_cliente
    FROM C##finnk.tab_listado_clientes
    WHERE id_cliente = p_id_cliente;
    
    RETURN v_correo_cliente;
  END;
END;
--Probar el paquete
DECLARE
  v_correo VARCHAR2(50);
BEGIN
  v_correo := C##finnk.paquete_funciones.ObtenerCorreoClientePorID(1);
  DBMS_OUTPUT.PUT_LINE('El correo del cliente es: ' || v_correo);
END;

--Pkg2
--Obtener el precio de un producto a partir de su ID de producto en una tabla llamada C##finnk.tab_catalogo_productos.
CREATE OR REPLACE PACKAGE C##finnk.paquete_precios AS
  FUNCTION ObtenerPrecioProductoPorID(
    p_id_producto IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE
  ) RETURN NUMBER;
END paquete_precios;


CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_precios AS
  FUNCTION ObtenerPrecioProductoPorID(
    p_id_producto IN C##finnk.tab_catalogo_productos.id_catalogo%TYPE
  ) RETURN NUMBER AS
    v_precio_producto C##finnk.tab_catalogo_productos.precio_producto%TYPE;
  BEGIN
    SELECT precio_producto INTO v_precio_producto
    FROM C##finnk.tab_catalogo_productos
    WHERE id_catalogo = p_id_producto;
    
    RETURN v_precio_producto;
  END;
END paquete_precios;
--Probar pkg--
DECLARE
  v_id_producto C##finnk.tab_catalogo_productos.id_catalogo%TYPE := 1; -- Cambia el ID del producto según tu base de datos
  v_precio NUMBER;
BEGIN
  v_precio := C##finnk.paquete_precios.ObtenerPrecioProductoPorID(v_id_producto);
  DBMS_OUTPUT.PUT_LINE('El precio del producto es: ' || v_precio);
END;
 
--Pkg3
-- La función devuelve un cursor (SYS_REFCURSOR) que contiene todos los proveedores que tienen un estado determinado.
CREATE OR REPLACE PACKAGE C##finnk.paquete_proveedores AS
  FUNCTION ObtenerProveedoresPorEstadoFunc(
    p_estado_proveedor IN C##finnk.tab_listado_proveedores.estado_proveedor%TYPE
  ) RETURN SYS_REFCURSOR;
END paquete_proveedores;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_proveedores AS
  FUNCTION ObtenerProveedoresPorEstadoFunc(
    p_estado_proveedor IN C##finnk.tab_listado_proveedores.estado_proveedor%TYPE
  ) RETURN SYS_REFCURSOR AS
    v_proveedores SYS_REFCURSOR;
  BEGIN
    OPEN v_proveedores FOR
      SELECT *
      FROM C##finnk.tab_listado_proveedores
      WHERE estado_proveedor = p_estado_proveedor;
    
    RETURN v_proveedores;
  END;
END paquete_proveedores;


-- Probar el pkg
DECLARE
  v_estado C##finnk.tab_listado_proveedores.estado_proveedor%TYPE := 'Y'; -- Cambia el estado según tu base de datos
  v_cursor SYS_REFCURSOR;
  v_proveedor C##finnk.tab_listado_proveedores%ROWTYPE;
BEGIN
  v_cursor := C##finnk.paquete_proveedores.ObtenerProveedoresPorEstadoFunc(v_estado);
  
  LOOP
    FETCH v_cursor INTO v_proveedor;
    EXIT WHEN v_cursor%NOTFOUND;
    
    DBMS_OUTPUT.PUT_LINE('Proveedor ID: ' || v_proveedor.id_proveedor || ', Nombre: ' || v_proveedor.nombre_proveedor);
  END LOOP;
  
  CLOSE v_cursor;
END;

--Pkg4
--cuenta el número de clientes.
CREATE OR REPLACE PACKAGE C##finnk.paquete_clientes AS
  FUNCTION ObtenerNumeroClientesFunc RETURN NUMBER;
END paquete_clientes;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_clientes AS
  FUNCTION ObtenerNumeroClientesFunc RETURN NUMBER AS
    v_numero_clientes NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_numero_clientes
    FROM C##finnk.tab_listado_clientes;
    
    RETURN v_numero_clientes;
  END;
END paquete_clientes;

-- Probar el pkg
DECLARE
  v_numero NUMBER;
BEGIN
  v_numero := paquete_clientes.ObtenerNumeroClientesFunc;
  DBMS_OUTPUT.PUT_LINE('Número total de clientes: ' || v_numero);
END;

--Pkg5
--devuelve el salario del empleado
CREATE OR REPLACE PACKAGE C##finnk.paquete_salarios AS
  FUNCTION ObtenerSalarioEmpleadoPorID(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
  ) RETURN NUMBER;
END paquete_salarios;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_salarios AS
  FUNCTION ObtenerSalarioEmpleadoPorID(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
  ) RETURN NUMBER AS
    v_salario_empleado C##finnk.tab_listado_empleados.salario_empleado%TYPE;
  BEGIN
    SELECT salario_empleado INTO v_salario_empleado
    FROM C##finnk.tab_listado_empleados
    WHERE id_empleado = p_id_empleado;
    
    RETURN v_salario_empleado;
  END;
END paquete_salarios;
--Probar el pkg
DECLARE
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE := 1; -- Cambiar el ID 
  v_salario NUMBER;
BEGIN
  v_salario := paquete_salarios.ObtenerSalarioEmpleadoPorID(v_id_empleado);
  DBMS_OUTPUT.PUT_LINE('El salario del empleado con ID ' || v_id_empleado || ' es: ' || v_salario);
END;


--Pkg6
--devuelve el id del proveedor correspondiente.
CREATE OR REPLACE PACKAGE C##finnk.paquete_proveedores_id AS
  FUNCTION ObtenerEstadoProveedorPorID(
    p_id_proveedor IN C##finnk.tab_listado_proveedores.id_proveedor%TYPE
  ) RETURN CHAR;
END paquete_proveedores_id;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_proveedores_id AS
  FUNCTION ObtenerEstadoProveedorPorID(
    p_id_proveedor IN C##finnk.tab_listado_proveedores.id_proveedor%TYPE
  ) RETURN CHAR AS
    v_estado_proveedor C##finnk.tab_listado_proveedores.estado_proveedor%TYPE;
  BEGIN
    SELECT estado_proveedor INTO v_estado_proveedor
    FROM C##finnk.tab_listado_proveedores
    WHERE id_proveedor = p_id_proveedor;
    
    RETURN v_estado_proveedor;
  END;
END paquete_proveedores_id;

--Probar pkg
DECLARE
  v_id_proveedor C##finnk.tab_listado_proveedores.id_proveedor%TYPE := 1; -- Cambiar el ID del proveedor 
  v_estado CHAR(1);
BEGIN
  v_estado := paquete_proveedores_id.ObtenerEstadoProveedorPorID(v_id_proveedor);
  DBMS_OUTPUT.PUT_LINE('Estado del proveedor: ' || v_estado);
END;

--Pkg7
--Devuelve el número total de reclamos en la tabla
CREATE OR REPLACE PACKAGE C##finnk.paquete_reclamos AS
  FUNCTION ObtenerTotalReclamosFunc RETURN NUMBER;
END paquete_reclamos;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_reclamos AS
  FUNCTION ObtenerTotalReclamosFunc RETURN NUMBER AS
    v_total_reclamos NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_total_reclamos
    FROM C##finnk.tab_listado_reclamos;
    
    RETURN v_total_reclamos;
  END;
END paquete_reclamos;

--Probar pkg
DECLARE
  v_total NUMBER;
BEGIN
  v_total := paquete_reclamos.ObtenerTotalReclamosFunc;
  DBMS_OUTPUT.PUT_LINE('Total de reclamos: ' || v_total);
END;

--Pkg8
--Devuelve el nombre del empleado por el id
CREATE OR REPLACE PACKAGE C##finnk.paquete_empleados_id AS
  FUNCTION ObtenerNombreEmpleadoPorID(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
  ) RETURN VARCHAR2;
END paquete_empleados_id;

CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_empleados_id AS
  FUNCTION ObtenerNombreEmpleadoPorID(
    p_id_empleado IN C##finnk.tab_listado_empleados.id_empleado%TYPE
  ) RETURN VARCHAR2 AS
    v_nombre_empleado VARCHAR2(80);
  BEGIN
    SELECT nombre_empleado || ' ' || apellidos_empleado INTO v_nombre_empleado
    FROM C##finnk.tab_listado_empleados
    WHERE id_empleado = p_id_empleado;
    
    RETURN v_nombre_empleado;
  END;
END paquete_empleados_id;

--Probar pkg
DECLARE
  v_id_empleado C##finnk.tab_listado_empleados.id_empleado%TYPE := 1; -- Cambia el ID del empleado según tu base de datos
  v_nombre VARCHAR2(80);
BEGIN
  v_nombre := paquete_empleados_id.ObtenerNombreEmpleadoPorID(v_id_empleado);
  DBMS_OUTPUT.PUT_LINE('Nombre del empleado: ' || v_nombre);
END;

--Pkg 9
--Devuelve el número de tiendas en esa localidad.
CREATE OR REPLACE PACKAGE C##finnk.paquete_tiendas AS
  FUNCTION ObtenerNumeroTiendasPorLocalidadFunc(
    p_localidad_tienda IN C##finnk.tab_listado_tienda.localidad_tienda%TYPE
  ) RETURN NUMBER;
END paquete_tiendas;


CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_tiendas AS
  FUNCTION ObtenerNumeroTiendasPorLocalidadFunc(
    p_localidad_tienda IN C##finnk.tab_listado_tienda.localidad_tienda%TYPE
  ) RETURN NUMBER AS
    v_numero_tiendas NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_numero_tiendas
    FROM C##finnk.tab_listado_tienda
    WHERE localidad_tienda = p_localidad_tienda;
    
    RETURN v_numero_tiendas;
  END;
END paquete_tiendas;

--Probar pkg
DECLARE
  v_localidad C##finnk.tab_listado_tienda.localidad_tienda%TYPE := 'Tienda Finnk Cartago Metropolis'; -- Cambiar la localidad
  v_numero NUMBER;
BEGIN
  v_numero := paquete_tiendas.ObtenerNumeroTiendasPorLocalidadFunc(v_localidad);
  DBMS_OUTPUT.PUT_LINE('Número de tiendas en ' || v_localidad || ': ' || v_numero);
END;


--Pkg10
--La función toma un correo de empleado como argumento y devuelve una fila completa de la tabla
CREATE OR REPLACE PACKAGE C##finnk.paquete_empleados_correo AS
  FUNCTION ObtenerEmpleadoPorCorreo(
    p_correo_empleado IN C##finnk.tab_listado_empleados.correo_empleado%TYPE
  ) RETURN C##finnk.tab_listado_empleados%ROWTYPE;
END paquete_empleados_correo;


CREATE OR REPLACE PACKAGE BODY C##finnk.paquete_empleados_correo AS
  FUNCTION ObtenerEmpleadoPorCorreo(
    p_correo_empleado IN C##finnk.tab_listado_empleados.correo_empleado%TYPE
  ) RETURN C##finnk.tab_listado_empleados%ROWTYPE AS
    v_empleado C##finnk.tab_listado_empleados%ROWTYPE;
  BEGIN
    SELECT *
    INTO v_empleado
    FROM C##finnk.tab_listado_empleados
    WHERE correo_empleado = p_correo_empleado;
    
    RETURN v_empleado;
  END;
END paquete_empleados_correo;

--Probar el pkg
DECLARE
  v_correo C##finnk.tab_listado_empleados.correo_empleado%TYPE := 'luivar88899@hotmail.com'; -- Cambia el correo según tu base de datos
  v_empleado C##finnk.tab_listado_empleados%ROWTYPE;
BEGIN
  v_empleado := paquete_empleados_correo.ObtenerEmpleadoPorCorreo(v_correo);
  DBMS_OUTPUT.PUT_LINE('Empleado encontrado:');
  DBMS_OUTPUT.PUT_LINE('ID Empleado: ' || v_empleado.id_empleado);
  DBMS_OUTPUT.PUT_LINE('Nombre: ' || v_empleado.nombre_empleado);
  DBMS_OUTPUT.PUT_LINE('Apellidos: ' || v_empleado.apellidos_empleado);
 
END;

